extends /layout/dark

block beforehtml
  - const title = 'NFC M1 EML Diff Tools'

block style
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .eml-table
        min-width: 323px
        table
          width: 321px
        td
          font-size: 12px
          height: 20px
        .byte-keya, .byte-keyb
          color: #17a2b8
        .byte-acl
          color: #ffc107
        .byte-ne
          background-color: #d8d2e9
        .byte-current
          border-color: #dc3545 !important
        .byte-left
          border-right-color: #dc3545 !important
        .byte-up
          border-bottom-color: #dc3545 !important

block content
  #app.my-3.container-fluid.text-monospace(v-cloak)
    h2.mb-3.text-center=title
    .d-flex.flex-row.mx-n1.mt-3
      .card.mx-1.eml-table(v-for="eml, emlIdx of emls")
        .card-header.pl-3.pr-2.d-flex.align-items-center
          i.fa.fa-id-card-o.mr-2
          .mr-auto 卡號 {{ eml.uid }}
          .dropdown
            button.btn.btn-sm.my-n2(type="button", data-toggle="dropdown") #[i.fa.fa-chevron-down]
            .dropdown-menu.dropdown-menu-right
              button.dropdown-item(type="button", @click="btnEditEml(emlIdx)") 編輯
        table.table.table-bordered.table-sm.mb-0.text-center
          tr(v-for="i of _.times(64)")
            template(v-for="j of _.range(i * 16, i * 16 + 16)")
              td.align-middle.p-0(:class="byteClass(j)", @click="h.pos = j") {{ eml.buf.subarray(j, j + 1).hex }}
      .table-responsive.flex-fill.mx-1
        table#eml-inspect.table.table-bordered.table-striped
          tr
            th(scope="row") pos
            td(colspan="2") {{ h.pos }}
          tr
            th(scope="row") block
            td(colspan="2") {{ h.pos >> 4 }}
          tr
            th(scope="row") blockPos
            td(colspan="2") {{ h.pos & 0xF }}
          tr
            th(scope="row") sector
            td(colspan="2") {{ h.pos >> 6 }}
          tr
            th(scope="row") sectorBlock
            td(colspan="2") {{ (h.pos >> 4) & 0x3 }}
          tr
            th(scope="row") getUint8
            td(v-for="eml of emls", v-if="eml") {{ eml.buf.getUint8(h.pos, h.littleEndian) }}
          tr
            th(scope="row") getInt8
            td(v-for="eml of emls", v-if="eml") {{ eml.buf.getInt8(h.pos, h.littleEndian) }}
          tr(v-if="h.pos + 1 < 1024")
            th(scope="row") getUint16
            td(v-for="eml of emls", v-if="eml") {{ eml.buf.getUint16(h.pos, h.littleEndian) }}
          tr(v-if="h.pos + 1 < 1024")
            th(scope="row") getInt16
            td(v-for="eml of emls", v-if="eml") {{ eml.buf.getInt16(h.pos, h.littleEndian) }}
          tr(v-if="h.pos + 2 < 1024")
            th(scope="row") getUint24
            td(v-for="eml of emls", v-if="eml") {{ eml.buf.getUint24(h.pos, h.littleEndian) }}
          tr(v-if="h.pos + 2 < 1024")
            th(scope="row") getInt24
            td(v-for="eml of emls", v-if="eml") {{ eml.buf.getInt24(h.pos, h.littleEndian) }}
          tr(v-if="h.pos + 3 < 1024")
            th(scope="row") getUint32
            td(v-for="eml of emls", v-if="eml") {{ eml.buf.getUint32(h.pos, h.littleEndian) }}
          tr(v-if="h.pos + 3 < 1024")
            th(scope="row") getInt32
            td(v-for="eml of emls", v-if="eml") {{ eml.buf.getInt32(h.pos, h.littleEndian) }}
          tr(v-if="h.pos + 1 < 1024")
            th(scope="row") getDosDateStr
            td(v-for="eml of emls", v-if="eml") {{ eml.buf.getDosDateStr(h.pos) }}
          tr(v-if="h.pos + 3 < 1024")
            th(scope="row") getUnixStr
            td(v-for="eml of emls", v-if="eml") {{ eml.buf.getUnixStr(h.pos) }}
    #modal-exportimport.modal.fade(data-backdrop="static", data-keyboard="false", tabindex="-1", ref="modalExportImport")
      .modal-dialog.modal-dialog-centered.modal-xl.align-items-stretch
        .modal-content
          .modal-body.d-flex.flex-column
            .d-flex.flex-fill.mx-n1
              .form-group.flex-fill.d-flex.flex-column.mx-1.my-0(v-for="i of _.times(2)")
                label(@click="btnCopy(exportimport.emls[i], $refs['modalExportImport'])") {{ '左右'[i] }}方 (點此可複製)
                textarea.form-control.form-control-sm.flex-fill(v-model="exportimport.emls[i]")
            small.text-muted.form-text 請複製或貼上 EML 並點一下「匯入」按鈕。
          .modal-footer
            button.btn.btn-secondary(type="button", @click="_.invoke(exportimport, 'resolve', 0)") 關閉
            button.btn.btn-primary(type="button", @click="_.invoke(exportimport, 'resolve', 1)") 匯入

block script
  script(crossorigin="anonymous", src="https://taichunmin.idv.tw/proxmark3.js/proxmark3.min.js")
  script.
    const { BufferLE } = window.Proxmark3
    BufferLE.prototype.getUnixStr = function (pos, littleEndian = true) {
      return dayjs.unix(this.getUint32(pos, littleEndian) - 28800).format('YYYY-MM-DD HH:mm:ss')
    }
    BufferLE.prototype.getDosDateStr = function (pos, littleEndian = true) {
      const u16 = this.getUint16(pos, littleEndian)
      if (!u16) return '無資料'
      return dayjs(`${1980 + (u16 >> 9)}-${(u16 >> 5) & 0xF}-${u16 & 0x1F}`).format('YYYY-MM-DD')
    }
    class M1 {
      constructor (buf) {
        if (!buf || !(buf instanceof BufferLE) || buf.byteLength !== 1024) throw new TypeError('invalid buf')
        this.buf = buf
      }

      static fromEml (eml) {
        eml = eml.replace(/-/g, '0').replace(/[^0-9A-Fa-f]/g, '')
        if (eml.length !== 2048) throw new TypeError('錯誤的 eml')
        return new M1(BufferLE.fromHex(eml))
      }

      get keya () {
        const buf = this.buf
        return _.uniq(_.times(16, i => buf.subarray((i << 6) + 48, (i << 6) + 54).hex)).join('\n')
      }

      get keyb () {
        const buf = this.buf
        return _.uniq(_.times(16, i => buf.subarray((i << 6) + 58, (i << 6) + 64).hex)).join('\n')
      }

      get eml () {
        const buf = this.buf
        return _.toUpper(_.times(64, i => buf.subarray(i << 4, (i + 1) << 4).hex).join('\n'))
      }

      get uid () { return this.buf.subarray(0, 4).hex } // 卡片編號
    }
    window.vm = new Vue({
      el: '#app',
      data: {
        h: {
          emls: ['', ''],
          littleEndian: true,
          pos: 0,
        },
        exportimport: {
          emls: ['', ''],
          resolver: null,
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'h', { ...this.h, ...saved })
        } catch (err) {}
        this.$watch('h', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.h))
        }, { deep: true })
      },
      computed: {
        emls () {
          const emls = []
          for (let i = 0; i < 2; i++) {
            try {
              emls[i] = M1.fromEml(this.h.emls[i])
            } catch (err) {
              emls[i] = new M1(new BufferLE(1024))
            }
          }
          return emls
        },
      },
      methods: {
        async btnEditEml (emlIdx) {
          const ctx = this.exportimport
          const pending = new Promise(resolve => { this.$set(ctx, 'resolve', resolve) })
          this.$set(ctx, 'emls', this.h.emls)
          this.jqModal('modalExportImport', 'show')
          const isImport = await pending
          this.$set(ctx, 'resolve', null)
          this.jqModal('modalExportImport', 'hide')
          if (isImport) this.$set(this.h, 'emls', ctx.emls)
        },
        async btnCopy (text, container = null) {
          if (!container) container = document.body
          const dom = document.createElement('textarea')
          dom.value = text
          container.appendChild(dom)
          dom.select()
          dom.setSelectionRange(0, 1e6) // For mobile devices
          document.execCommand('copy')
          container.removeChild(dom)
          await Swal.fire({ icon: 'success', title: '複製成功' })
        },
        byteClass (pos) {
          const c = {
            block: pos >> 4,
            blockPos: pos & 0xF,
            sector: pos >> 6,
            sectorBlock: (pos >> 4) & 0x3,
            class: [],
          }

          if (pos === this.h.pos) c.class.push('byte-current')
          else if (pos + 1 === this.h.pos && c.blockPos < 15) c.class.push('byte-left')
          else if (pos + 16 === this.h.pos) c.class.push('byte-up')

          if (c.sectorBlock === 3) {
            if (c.blockPos < 6) c.class.push('byte-keya')
            else if (c.blockPos < 10) c.class.push('byte-acl')
            else c.class.push('byte-keyb')
          }

          if (this.emls) {
            const data = [this.emls[0].buf.getUint8(pos), this.emls[1].buf.getUint8(pos)]
            if (data[0] !== data[1]) c.class.push('byte-ne')
          }

          return c.class.join(' ')
        },
        jqModal (ref, action) {
          window.jQuery(this.$refs[ref]).modal(action)
        },
      },
    })
