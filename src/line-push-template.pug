extends /layouts/default

block beforehtml
  - const title = 'LINE 訊息推送工具'

block style
  meta(property="fb:app_id", content="2133031763635285")
  meta(property="og:description", content="LINE Notify 大量發送工具")
  meta(property="og:locale", content="zh_TW")
  meta(property="og:site_name", content="筆記國度")
  meta(property="og:title", content=title)
  meta(property="og:type", content="website")
  meta(property="og:url", content="https://liff.line.me/1654046335-GrzoBW0r")
  style
    :sass
      [v-cloak]
        display: none
      .h-400px
        height: 400px !important
      #error
        position: fixed
        bottom: 0
        z-index: 1071
        left: 1rem
        right: 1rem
        button.close
          position: absolute
          right: 1.25rem
          top: .75rem

block content
  .container.text-monospace.my-3#app(v-cloak, v-show="ready")
    .alert.alert-danger#error(role="alert", v-show="error")
      pre.mb-0 {{ `${error}\n請於開發者工具中查看詳細錯誤內容` }}
      button.close(type="button", @click="error = ''") #[span &times;]
    h1 LINE 訊息推送工具
    .form-group
      label(for="csv") CSV 網址 (資料會放到 #[code row] 然後以第一列當作 key)
      textarea#csv.form-control.form-control-sm(v-model="i.csv", rows="5")
    .row
      .col
        .form-group
          label(for="to") 傳送給 (範例：#[code ${row.line_id}])
          input#to.form-control.form-control-sm(v-model="i.to")
      .col
        .form-group
          label(for="access-token") Access Token
          input#access-token.form-control.form-control-sm(type="password", v-model="i.accessToken")
    .form-group
      label(for="msg") 訊息內容 JSON (先處理變數才會轉 JSON，務必注意 JSON escape 的問題)
      textarea#msg.form-control.form-control-sm.h-400px(v-model="i.msg")
    .row.mx-n2
      button.btn.btn-success.mx-2.my-1(type="button", @click="lineShare") 分享測試訊息
      button.btn.btn-light.mx-2.my-1(disabled, v-if="status") {{ status }}…
      button.btn.btn-danger.mx-2.my-1(type="button", @click="linePush", v-else) 推送訊息
      a.btn.btn-outline-info.mx-2.my-1(href="https://taichunmin.idv.tw/blog/2020-06-15-line-push-template.html", target="_blank") 使用教學
      a.btn.btn-outline-info.mx-2.my-1(href="https://developers.line.biz/flex-simulator/", target="_blank") Flex 訊息模擬器
      a.btn.btn-outline-info.mx-2.my-1(href="https://developers.line.biz/en/reference/messaging-api/#flex-message", target="_blank") LINE 訊息文件
      a.btn.btn-outline-info.mx-2.my-1(href="https://lodash.com/docs/#template", target="_blank") _.template 變數語法說明

block script
  script(src="https://static.line-scdn.net/liff/edge/2/sdk.js")
  script.
    /* global sleep, loginPromise */
    window.loginPromise = (async () => {
      await liff.init({ liffId: '1654046335-GrzoBW0r' })
      if (new URL(window.location).searchParams.get('liff.state')) await new Promise(resolve => {}) // 永遠不會結束的 Promise
      if (!liff.isLoggedIn()) {
        liff.login({ redirectUri: location.href })
        await new Promise(resolve => {}) // 永遠不會結束的 Promise
      }
      try { return await liff.getProfile() } catch (err) {}
    })()
    window.sleep = wait => new Promise(resolve => setTimeout(resolve, wait))
    window.vm = new Vue({
      el: '#app',
      data: {
        error: '',
        ready: false,
        status: '',
        i: {
          accessToken: '',
          csv: '',
          msg: '',
          to: '${row.line_id}', // eslint-disable-line
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'i', { ...this.i, ...saved })
        } catch (err) {}
        this.$watch('i', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.i))
        }, { deep: true })
        this.ready = true
      },
      methods: {
        async linePush () {
          const errors = []
          try {
            // 取得 csv
            this.status = '正在從 csv 取得資料'
            const rows = await this.getCsv(this.i.csv)
            console.log(`成功從 csv 中取得 ${rows.length} 筆資料`)
            if (rows.length <= 0) throw new Error('csv 中沒有任何記錄')

            // 推送確認
            this.status = '等候使用者確認推送'
            await sleep(100)
            if (!confirm(`即將推送 ${rows.length} 則訊息！`)) throw new Error('使用者自行取消推送')

            // compile tpl
            this.status = '正在解析訊息內容 JSON'
            const tplTo = _.template(this.i.to)
            const tplMsg = _.template(this.i.msg)

            let sendCnt = 0
            for (const row of rows) {
              try {
                this.status = `正在傳送訊息 (${++sendCnt} / ${rows.length})`
                const to = tplTo({ Qs, _, dayjs, row })
                const msg = JSON5.parse(tplMsg({ Qs, _, dayjs, row }))
                await this.pushMessage(to, msg)
              } catch (err) {
                err.message = `第 ${sendCnt} 筆發生錯誤: ${err.message}`
                console.error(err)
                errors.push(err)
              }
            }
          } catch (err) {
            console.error(err)
            errors.push(err)
          }
          this.error = _.map(errors, err => err.message).join('\n')
          this.status = ''
        },
        async lineShare () {
          try {
            await loginPromise
            if (!liff.isApiAvailable('shareTargetPicker')) throw new Error('不支援 shareTargetPicker，請嘗試更新應用程式版本。')
            const rows = await this.getCsv(this.i.csv)
            if (rows.length < 1) throw new Error('無法從 csv 中取得資料')
            const tplMsg = _.template(this.i.msg)
            let messages = JSON5.parse(tplMsg({ Qs, _, dayjs, row: _.first(rows) }))
            if (_.includes(['bubble', 'carousel'], _.get(messages, 'type'))) {
              // 幫 Flex 訊息模擬器補上外層
              messages = { type: 'flex', altText: '您有一則新訊息', contents: messages }
            }
            console.log('messages =', JSON.stringify(messages))
            const res = await liff.shareTargetPicker(_.isArray(messages) ? messages : [messages])
            if (_.get(res, 'status') !== 'success') throw new Error('傳送失敗')
            await Swal.fire({
              icon: 'success',
              title: '測試訊息已分享',
            })
          } catch (err) {
            console.error(err)
            this.error = err.message
          }
        },
        async getCsv (url) {
          const csv = _.trim(_.get(await axios.get(url, {
            params: { cachebust: _.floor(Date.now() / 3e4) },
          }), 'data'))
          return _.get(Papa.parse(csv, {
            encoding: 'utf8',
            header: true,
          }), 'data', [])
        },
        async pushMessage (to, messages, notificationDisabled = false) {
          try {
            if (!this.isLineId(to)) throw new Error(`不正確的 LINE userId: "${to}"`)
            if (!/^[A-Za-z0-9+/=]+$/.test(this.i.accessToken)) throw new Error(`不正確的 Access Token: "${this.i.accessToken}"`)
            if (_.includes(['bubble', 'carousel'], _.get(messages, 'type'))) {
              // 幫 Flex 訊息模擬器補上外層
              messages = { type: 'flex', altText: '您有一則新訊息', contents: messages }
            }
            if (!_.isArray(messages)) messages = [messages]
            await axios.post('https://us-central1-taichunmin.cloudfunctions.net/cors-anywhere', {
              to,
              messages,
              notificationDisabled,
            }, {
              params: { u: 'https://api.line.me/v2/bot/message/push' },
              headers: {
                Authorization: `Bearer ${this.i.accessToken}`,
              },
            })
          } catch (err) {
            if (_.hasIn(err, 'response')) {
              const res = err.response
              const debugObj = { status: res.status, headers: res.headers, data: res.data, to, messages }
              console.log(debugObj)
              err.stack = `${err.name}: LINE pushMessage failed with status code ${res.status}\n${JSON.stringify(debugObj, null, 2)}`
            }
            throw err
          }
        },
        isLineId (lineId) {
          return lineId !== 'Udeadbeefdeadbeefdeadbeefdeadbeef' && /^U[0-9a-f]{32}$/.test(lineId)
        },
      },
    })
