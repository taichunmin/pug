extends /layout/bootstrapV4

block beforehtml
  - const title = 'Binance WOTD'

block style
  meta(property="fb:app_id", content="2133031763635285")
  meta(property="og:description", content="Binance WOTD 猜字遊戲的輔助工具")
  meta(property="og:image:height", content="640")
  meta(property="og:image:width", content="1280")
  meta(property="og:image", content="https://i.imgur.com/8FCoTo8.png")
  meta(property="og:locale", content="zh_TW")
  meta(property="og:site_name", content="筆記國度")
  meta(property="og:title", content=title)
  meta(property="og:type", content="website")
  meta(property="og:url", content="https://taichunmin.idv.tw/pug/binance-wotd.html")
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .letter-spacing-n1px
        &, .btn, textarea, select, input
          letter-spacing: -1px
      .text-sm
        font-size: 0.875rem

block content
  #app.container.my-4.text-monospace(v-cloak)
    h3.my-3.mb-0.text-center= title
    .input-group.input-group-sm.mb-3.letter-spacing-n1px
      .input-group-prepend: span.input-group-text Words
      textarea.form-control(v-model="ss.article", rows="5")
      .input-group-append: button.btn.btn-outline-secondary(@click="ss.article = ''") #[i.fa.fa-fw.fa-times]
    .card.mb-3
      h6.card-header 輸入猜測及結果 #[span.badge.badge-pill.badge-primary {{ ls.letter }}]
      ul.list-group.list-group-flush
        li.list-group-item
          .row.mx-n1
            .col.px-1: button.btn.btn-sm.btn-block.btn-outline-danger(@click="btnNewSolver(false)") #[i.fa.fa-fw.fa-refresh] 重設及改字數
            .col.px-1: button.btn.btn-sm.btn-block.btn-outline-primary(@click="btnLoadDict") #[i.fa.fa-fw.fa-cloud-download] 載入預設詞庫
          .text-sm.text-muted.letter-spacing-n1px.mt-2 詞庫網址: #[a(target="_blank", href="https://gist.github.com/taichunmin/e3a6a7b504bc416e36c0cb8aa2f2c7ec") https://gist.github.com/taichunmin/e3a6a7b504bc416e36c0cb8aa2f2c7ec]
        li.list-group-item(v-for="(solver, solverId) in ss.solvers")
          .input-group.input-group-sm.mb-2.letter-spacing-n1px
            .input-group-prepend: span.input-group-text {{ solverId + 1 }}
            input.form-control(type="text", v-model="solver.guess")
            .input-group-append: button.btn.btn-outline-secondary(@click="solver.guess = ''") #[i.fa.fa-fw.fa-times]
          .d-flex.flex-row.justify-content-between.align-items-center(role="toolbar")
            .d-block.my-0 結果
            .btn-group.btn-group-sm(role="group")
              button.btn.btn-outline-dark(v-for="v, k of solver.simiArr", @click="$set(solver.simiArr, k, (v+1)%3)")
                i.fa.fa-square(:class="`text-${['muted', 'warning', 'success'][v]}`")
    .card.mb-3
      h6.card-header 探索謎底 #[span.badge.badge-pill.badge-primary {{ candidates.length }}]
      .card-body
        .form-group.mb-0
          label.my-1 可能的謎底 #[span.badge.badge-pill.badge-success {{ possibles.length }}]
          small.my-1.form-text.text-muted(v-if="possibles.length > 100") 僅顯示前 100 筆可能的謎底
          #possibles
            span.badge.badge-info.mr-1(v-for="possible in _.take(possibles, 100)", @click="btnCopy(possible)") {{ possible }}

block script
  script(type="module").
    window.vm = new Vue({
      el: '#app',
      data: {
        ls: {
          letter: 7,
        },
        ss: {
          article: '',
          solvers: [],
        },
      },
      async mounted () {
        // 自動儲存功能
        for (const [storage, key] of [[localStorage, 'ls'], [sessionStorage, 'ss']]) {
          try {
            const saved = JSON5.parse(storage.getItem(location.pathname))
            if (saved) this.$set(this, key, _.merge({}, this[key], saved))
          } catch (err) {}
          this.$watch(key, () => {
            storage.setItem(location.pathname, JSON5.stringify(this[key]))
          }, { deep: true })
        }
        if (!this.ss.solvers.length) this.btnNewSolver(true)
      },
      computed: {
        candidates () {
          try {
            const { ls: { letter }, ss: { article } } = this
            let words = _.chain(article.split(/\s+/))
              .map(_.toLower)
              .map(word => word.replaceAll(/[^a-zA-Z]/g, ''))
              .filter(word => word.length === letter)
              .uniq()
              .value()
            if (words.length < 1) return []
            const letterCnt = this.createLetterCnt(words)
            words = _.orderBy(words, [
              word => _.uniq(word.split('')).length,
              word => _.sumBy(word, letter => letterCnt.get(letter) ?? 0),
              word => word,
            ], ['desc', 'desc', 'asc'])
            console.log(words)
            return words
          } catch (err) {
            return []
          }
        },
        candidatesLetterCnt () {
          return this.createLetterCnt(this.candidates)
        },
        validSolvers () {
          return _.filter(this.ss.solvers, solver => this.verifyGuess(solver.guess))
        },
        possibles () {
          const solvers = _.map(this.validSolvers, solver => ({
            guess: _.toLower(solver.guess),
            simi: this.simiArrToInt(solver.simiArr),
          }))
          if (!solvers.length) return this.candidates
          const words = _.filter(this.candidates, word => _.every(solvers, solver => this.simiArrToInt(this.simiCmp(solver.guess, word)) === solver.simi))
          return words
        },
      },
      methods: {
        async btnNewSolver (force = false) {
          if (!force && !await this.confirm('是否重設及修改字數？')) return
          const { promise: destroyPromise, resolve: didDestroy } = this.promiseWithResolvers()
          const { isConfirmed, value: letter } = await Swal.fire({
            didDestroy,
            input: 'number',
            inputAttributes: { autocapitalize: "off" },
            inputAttributes: { min: 3, max: 8, step: 1 },
            inputPlaceholder: '請輸入 3 到 8 的數字',
            inputValidator: newVal => _.inRange(newVal, 3, 9) ? null : '請輸入 3 到 8 的數字',
            inputValue: this.ls.letter,
            reverseButtons: true,
            showCancelButton: true,
            title: '請輸入字數',
          })
          if (!isConfirmed) return
          this.ls.letter = _.toInteger(letter)
          this.$set(this.ss, 'solvers', _.times(8, () => ({
            guess: '',
            simiArr: _.times(letter, () => 0),
          })))
          await destroyPromise
          await this.btnLoadDict()
        },
        async btnLoadDict () {
          try {
            this.showLoading({ text: '載入預設詞庫' })
            const letter = this.ls.letter
            const dict = (await axios.get(`https://gist.githubusercontent.com/taichunmin/e3a6a7b504bc416e36c0cb8aa2f2c7ec/raw/${letter}.txt`))?.data
            if (_.isEmpty(dict)) throw new Error('詞庫為空')
            this.ss.article = dict
            await Swal.fire({ icon: 'success', title: '載入預設詞庫成功' })
          } catch (err) {
            console.log(err)
            await this.swalFire({ icon: 'error', title: '載入失敗', text: err.message })
          }
        },
        createLetterCnt (words) {
          const letterCnt = new Map()
          for (const word of words) {
            for (const letter of word) letterCnt.set(letter, (letterCnt.get(letter) ?? 0) + 1)
          }
          return letterCnt
        },
        verifyGuess (guess) {
          if (guess.length !== this.ls.letter) return false
          return true
        },
        simiCmp (guess, answer) {
          const letter = answer.length
          const flags = _.times(letter * 2, () => 0)
          for (let i = 0; i < letter; i++) {
            if (guess[i] === answer[i]) flags[i] = flags[letter + i] = 2
          }
          for (let i = 0; i < letter; i++) {
            if (flags[i]) continue
            for (let j = 0; j < letter; j++) {
              if (i === j || flags[letter + j]) continue
              if (guess[i] === answer[j]) flags[i] = flags[letter + j] = 1
            }
          }
          return flags.slice(0, letter)
        },
        simiArrToInt (simiArr) {
          let simi = 0
          for (let tmp of simiArr) simi = simi * 4 + tmp
          return simi
        },
        promiseWithResolvers () {
          let resolve, reject
          const promise = new Promise((res, rej) => { resolve = res; reject = rej })
          return { promise, reject, resolve }
        },
        async confirm (text, confirmButtonText = '是', cancelButtonText = '否') {
          return await new Promise((resolve, reject) => {
            let isConfirmed = false
            const args = {
              cancelButtonColor: '#3085d6',
              cancelButtonText,
              confirmButtonColor: '#d33',
              confirmButtonText,
              didDestroy: () => { resolve(isConfirmed) },
              focusCancel: true,
              icon: 'warning',
              reverseButtons: true,
              showCancelButton: true,
              text,
            }
            Swal.fire(args).then(res => { isConfirmed = res.isConfirmed })
          })
        },
        showLoading (opts = {}) {
          opts = {
            allowOutsideClick: false,
            showConfirmButton: false,
            ...opts,
          }
          if (Swal.isVisible()) return Swal.update(_.omit(opts, ['progressStepsDistance']))
          Swal.fire({ ...opts, didRender: () => { Swal.showLoading() } })
        },
        async btnCopy (text, container = null) {
          if (!container) container = document.body
          const dom = document.createElement('textarea')
          dom.value = text
          container.appendChild(dom)
          dom.select()
          dom.setSelectionRange(0, 1e6) // For mobile devices
          document.execCommand('copy')
          container.removeChild(dom)
          await Swal.fire({ icon: 'success', title: '複製成功' })
        },
      },
    })
