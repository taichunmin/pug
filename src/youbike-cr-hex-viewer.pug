extends /layout/dark

block beforehtml
  - const title = 'YBCR HEX Viewer'

block style
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif

block content
  #app.my-3.container(v-cloak)
    h2.mb-3.text-center YBCR HEX Viewer
    .input-group.mb-3
      .input-group-prepend: span.input-group-text Fieldset
      select.form-control(v-model="i.fieldset")
        option(v-for="v, k in fieldsetConfig", :value="k") {{ k }} ({{ _.sum(_.map(v, '1')) }})
    .form-group
      label HEX #[span.badge.badge-pill.badge-secondary {{ i.hex.length / 2 }}]
      textarea.form-control.text-monospace(v-model="i.hex", style="height: 300px")
    .d-flex.align-items-center.w-100(v-for="row in datatable")
      .text-right(style="width: 25%") #[span.badge.badge-pill.badge-secondary {{ row.start }}~{{ row.end }} ({{ row.len }})] {{ row.name }}
      .flex-grow-1.text-monospace.pr-2.pb-2
        button.btn.btn-sm.mt-2.ml-2(v-for="btn in row.btns", :class="btn.class1", @click="btnCopy(btn.code)")
          | {{ btn.name }}
          span.badge.ml-1.text-left(:class="btn.class2", v-html="btn.code")

block script
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/moment@2/moment.min.js")
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/moment@2/locale/zh-tw.min.js")
  script.
    window.vm = new Vue({
      el: '#app',
      data: {
        copyText: '',
        fieldsetConfig: {
          ecc: [
            ['卡號', 8],
            ['卡號長度', 1],
            ['票卡版號 PurseVer', 1],
            ['外觀卡號 PID', 8],
            ['卡交易號 CTC', 3],
            ['卡別 CardType', 1, { eccCardType: 1 }],
            ['身份別 PersonalProfile', 1, { eccProfile: 1 }],
            ['舊設備編號 Device ID', 4],
            ['新設備編號 NewDeviceID', 6],
            ['舊服務業者代碼', 1],
            ['新服務業者代碼', 3],
            ['舊場站代碼', 1],
            ['新場站代碼', 2],
            ['IssuerCode', 1],
            ['票卡簽章金鑰號 signature KVN', 1],
            ['交易種類 TM', 1],
            ['交易屬性 TQ', 1],
            ['子區碼 SubAreaCode', 2],
            ['交易前票卡餘額', 3],
            ['交易前票卡交易序號', 3],
            ['區碼 AreaCode', 1],
            ['交易金額 TXNAMT', 3],
            ['銀行代碼 BankCode', 1],
            ['二代卡防虛擬碼(忠誠點數)', 2],
            ['票卡最後一筆加值記錄 LastCreditLogp', 33],
            ['SubType', 1],
            ['TSQN', 3],
            ['票卡餘額 PurseBalance', 3],
            ['SIGN', 16],
            ['SID SAM ID', 8],
            ['MAC', 16],
            ['hash type', 1],
            ['host admin key kvn', 1],
            ['TXDDateTime', 4, { unixtime: 1 }],
            ['扣款種類', 1],
            ['腳踏車編號 BikeNo', 5, { bike: 1 }],
            ['票卡另一個錢包餘額 Another EV', 3],
            ['MifareSettingParameter', 1],
            ['CPU SettingParameter', 1],
            ['還車車柱編號 PartNo', 5],
            ['前筆轉乘交易序號 TSQN of URT', 3],
            ['前筆轉乘交易時間 TXN Date Time of URT', 4, { unixtime: 1 }],
            ['特種票到期日 Fare Product Expire Date', 2, { date: 1 }],
            ['特種票票種 Fare Product Type', 1],
            ['轉乘代碼 Transfer Group Code', 1],
            ['新轉乘代碼 New Transfer Group Code', 2],
            ['轉乘優惠金額 Transfer Discount', 2],
            ['社福優惠金額 Personal Discount', 2],
            ['社福卡免費搭乘累積點數 Accumulated Free Rides', 2],
            ['借車車柱編號 rent_PartNo', 5],
            ['Personal Profile Authorization', 1],
          ],
          ipass: [
            ['卡號 CSN', 4],
            ['卡號批號', 12],
            ['交易讀寫器編號', 4],
            ['電子票值 evValue', 4],
            ['備份電子票值 bevValue', 4],
            ['同步後電子票值 syncValue', 4],
            ['優惠記名卡身份證字型大小 personalID', 6],
            ['前筆交易日期 preGenTime', 4, { unixtime: 1 }],
            ['前筆交易類別 preGenClass', 1],
            ['前筆交易票值 preGenDeductEValue', 2],
            ['前筆交易後票值 preGenBalanceEValue', 2],
            ['前筆交易系統編號 preGenSystem', 1],
            ['前筆交易地點或業者 preGenLocationCompID', 1],
            ['前筆交易設備編號 preGenTerminalID', 4],
            ['同步狀態 syncStatus', 1],
            ['前筆轉乘識別群組#1-交易時間 trfTxnTime', 4, { unixtime: 1 }],
            ['前筆轉乘識別群組#2-本次交通系統代碼 trfCurrentSystemID', 1],
            ['前筆轉乘識別群組#3 trfPreviousSystemID', 1],
            ['前筆轉乘識別群組#4-交易類別 trfTxnClass', 1],
            ['前筆轉乘識別群組#5-交易運輸業者(全域業者代碼) trfTxnCompID', 1],
            ['前筆轉乘識別群組#6-交易運輸地點、站號或段號 trfTxnLocationID', 1],
            ['前筆轉乘識別群組#7-交易端未設備編號 trfTxnTerminalID', 4],
            ['個人身分別 personalType', 1],
            ['發卡單位 issueCode', 1],
            ['交易金額 txnsValue', 2],
            ['交易時間 txnsTime', 4, { unixtime: 1 }],
            ['交易類別', 1],
            ['租賃交易應付金額 txnsPayAmount', 2],
            ['轉乘優惠金額 txnsTransAmount', 2],
            ['專案優惠金額 txnsPorjectAmount', 2],
            ['專案優惠旗標 txnsProjectFlaf', 1],
            ['借車時間 txnsRentingTime', 4, { unixtime: 1 }],
            ['此次轉乘識別群組#3', 1],
            ['此次轉乘識別群組#2', 1],
            ['交易後卡片餘額 txnsBalance', 4],
            ['卡片交易序號 sequenceNO', 2],
            ['SAM卡號 samID', 8],
            ['交易驗證碼 TAC', 4],
            ['TacByteAry', 56],
            ['扣款種類', 1],
            ['腳踏車編號 BikeNo', 5],
            ['車柱編號 PartNo', 2],
            ['RFU', 13], // max 74
          ],
        },
        i: {
          fieldset: '',
          hex: '',
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'i', { ...this.i, ...saved })
        } catch (err) {}
        this.$watch('i', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.i))
        }, { deep: true })
      },
      computed: {
        fieldset () {
          return this.fieldsetConfig[this.i.fieldset] || []
        },
        datatable () {
          let posStart = 0
          return _.map(this.fieldset, field => {
            const row = {
              btns: [],
              end: posStart / 2 + field[1],
              len: field[1],
              len2: field[1] * 2,
              name: field[0],
              options: (field[2] || {}),
              start: posStart / 2,
            }
            posStart += row.len2
            if (posStart > this.i.hex.length) return row
            const bytes = this.decodeBytes(this.i.hex.slice(posStart - row.len2, posStart))
            row.btns.push({ name: 'hex', code: _.map(_.chunk(bytes, 10), v => v.join(' ')).join('<br>'), class1: 'btn-primary', class2: 'badge-light' })

            // 無號整數
            if (row.len === 1) row.btns.push({ name: 'uint8', code: this.decodeUint(bytes), class1: 'btn-info', class2: 'badge-light' })
            if (row.len === 2) row.btns.push({ name: 'uint16', code: this.decodeUint(bytes), class1: 'btn-info', class2: 'badge-light' })
            if (row.len === 3) row.btns.push({ name: 'uint24', code: this.decodeUint(bytes), class1: 'btn-info', class2: 'badge-light' })
            if (row.len === 4) row.btns.push({ name: 'uint32', code: this.decodeUint(bytes), class1: 'btn-info', class2: 'badge-light' })
            if (row.len === 8) row.btns.push({ name: 'uint64', code: this.decodeUint(bytes), class1: 'btn-info', class2: 'badge-light' })

            // 有號整數
            if (row.len === 2) row.btns.push({ name: 'int16', code: this.decodeInt(bytes), class1: 'btn-info', class2: 'badge-light' })
            if (row.len === 3) row.btns.push({ name: 'int24', code: this.decodeInt(bytes), class1: 'btn-info', class2: 'badge-light' })
            if (row.len === 4) row.btns.push({ name: 'int32', code: this.decodeInt(bytes), class1: 'btn-info', class2: 'badge-light' })
            if (row.len === 8) row.btns.push({ name: 'int64', code: this.decodeInt(bytes), class1: 'btn-info', class2: 'badge-light' })

            if (row.len === 5) row.btns.push({ name: 'no', code: this.decodeNo5(bytes), class1: 'badge-warning', class2: 'badge-light' })
            if (row.options.bike) row.btns.push({ name: '車號', code: this.decodeBikeId(bytes), class1: 'badge-warning', class2: 'badge-light' })
            if (row.options.date) row.btns.push({ name: 'date', code: this.decodeDate(bytes), class1: 'badge-warning', class2: 'badge-light' })
            if (row.options.eccCardType) row.btns.push({ name: '卡別', code: this.decodeEccCardTypeName(bytes), class1: 'badge-warning', class2: 'badge-light' })
            if (row.options.eccProfile) row.btns.push({ name: '身份別', code: this.decodeEccProfile(bytes), class1: 'badge-warning', class2: 'badge-light' })
            if (row.options.unixtime) row.btns.push({ name: 'unixtime', code: this.decodeUnixtime(bytes, -28800), class1: 'badge-warning', class2: 'badge-light' })
            return row
          })
        },
      },
      methods: {
        async btnCopy (text, container = null) {
          const activeElement = document.activeElement
          if (!container) container = document.body
          const dom = document.createElement('textarea')
          dom.value = text
          container.appendChild(dom)
          dom.select()
          dom.setSelectionRange(0, 1e6) // For mobile devices
          document.execCommand('copy')
          container.removeChild(dom)
          activeElement.focus()
          await Swal.fire({
            backdrop: false,
            html: '<i class="fa fa-fw fa-check text-success"></i> 已複製',
            position: 'top-end',
            showConfirmButton: false,
            timer: 500,
            width: 150,
          })
        },
        decodeBytes (hex) {
          return _.map(_.chunk(_.toUpper(hex), 2), v => v.join('')).reverse()
        },
        decodeUnixtime (bytes, diff = 0) {
          return moment.unix(this.decodeUint(bytes) + diff).format('YYYY-MM-DD HH:mm:ss')
        },
        decodeUint (bytes) {
          return _.parseInt(bytes.join(''), 16)
        },
        decodeInt (bytes) {
          const mask = 2 ** (bytes.length * 8 - 1)
          const uint = this.decodeUint(bytes)
          return (mask & uint) ? (uint - mask - mask) : uint
        },
        decodeNo5 (bytes) {
          return bytes.reverse().join('')
        },
        decodeUintFixWidth (bytes, len) {
          return _.padStart(this.decodeUint(bytes), len, '0')
        },
        decodeBikeId (bytes) {
          return `${this.decodeUintFixWidth(bytes.slice(1, 2), 2)}${this.decodeUintFixWidth(bytes.slice(2), 5)}`
        },
        decodeEccCardTypeName (bytes) {
          const ECC_CARD_TYPE_NAME = {
            '00': '一般卡',
            '01': '強制記名卡',
            '02': '一般記名卡',
            '03': '紀念卡',
            '04': '替代卡',
            '05': '特製卡',
            '06': 'IC商品',
            '07': '測試卡',
            '08': '聯名卡',
            '09': '特種票',
            '0A': '數位學生證',
            '0B': '代幣卡',
            '0C': '腳踏車',
            '0D': 'iCash卡',
          }
          return ECC_CARD_TYPE_NAME[bytes[0].toUpperCase()]
        },
        decodeEccProfile (bytes) {
          const ECC_PROFILE = {
            '00': '普通',
            '01': '敬老一',
            '02': '敬老二',
            '03': '愛心',
            '04': '愛陪',
            '05': '學生',
            '06': '軍人',
            '07': '警察',
            '08': '孩童',
          }
          return ECC_PROFILE[bytes[0].toUpperCase()]
        },
        decodeDate (bytes) {
          const u = this.decodeUint(bytes)
          return u <= 0 ? '未知' : moment(`${1980 + (u >> 9)}-${(u >> 5) & 0xF}-${u & 0x1F}`).format('YYYY-MM-DD')
        },
      },
    })
