extends /layout/bootstrapV4

block beforehtml
  - const title = 'Inspect EasyCard'

block style
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      #card
        &, input.form-control
          letter-spacing: -1px
        textarea.form-control
          font-size: 12px
        .input-group-prepend .input-group-text
          letter-spacing: -2px
          min-width: 80px

block content
  #app.my-3.container-fluid(v-cloak)
    h2.mb-3.text-center=title
    #card.text-monospace.d-flex.flex-column.flex-md-row
      .mr-sm-3
        .form-group
          label 產生轉乘交易
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 轉乘時間
              input.form-control(type="text", v-model="h.xferTime")
              .input-group-append
                button.btn.btn-outline-secondary.rounded-right(type="button", data-toggle="dropdown") #[i.fa.fa-chevron-down]
                .dropdown-menu.dropdown-menu-right
                  button.dropdown-item(type="button", @click="btnSetXferTimeBeforeNow(10)") 距今 10 分鐘前
                  button.dropdown-item(type="button", @click="btnSetXferTimeBeforeNow(82)") 距今 82 分鐘前
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 扣款金額
              input.form-control(type="number", v-model.number="h.xferCost")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 轉乘群組
              select.form-control(v-model="h.xferGroup")
                option(v-for="pair of _.sortBy(_.toPairs(ecc?.xferGroups), 0)", :value="pair[0]") 0x{{ pair[0] }}: {{ pair[1] }}
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3
              button.btn.btn-sm.btn-block.btn-primary(type="button", @click="btnMakeTxnWithXfer") 複製 EML
        .form-group
          label 卡片基本資料
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 卡片編號
              input.form-control(readonly, :value="card?.uid")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 餘額
              input.form-control(readonly, :value="card?.ev")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 預設加值
              input.form-control(readonly, :value="card?.autoload")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 加值銀行
              input.form-control(readonly, :value="card?.bank")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 每日限額
              input.form-control(readonly, :value="card?.quotaDaily")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 單次限額
              input.form-control(readonly, :value="card?.quotaOnce")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 限額日期
              input.form-control(readonly, :value="card?.quotaDate")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 已用限額
              input.form-control(readonly, :value="card?.quotaUsed")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 卡別
              input.form-control(readonly, :value="card?.type")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 身份別
              input.form-control(readonly, :value="card?.profileType")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 身份到期
              input.form-control(readonly, :value="card?.profileExp")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 地區
              input.form-control(readonly, :value="card?.area")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 地區身份
              input.form-control(readonly, :value="card?.areaProfile")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 發卡時間
              input.form-control(readonly, :value="card?.issued")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 卡片效期
              input.form-control(readonly, :value="card?.exp")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 月票到期日
              input.form-control(readonly, :value="card?.monthlyExp")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 社福日期
              input.form-control(readonly, :value="card?.welfareDate")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 社福點數
              input.form-control(readonly, :value="card?.welfareUsed")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 票卡狀態
              input.form-control(readonly, :value="card?.usageControl")
        .form-group
          label 轉乘紀錄
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 交易序號
              input.form-control(readonly, :value="card?.xfer?.tsqn")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 時間
              input.form-control(readonly, :value="card?.xfer?.time")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 交易類別
              input.form-control(readonly, :value="card?.xfer?.type")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 扣款
              input.form-control(readonly, :value="card?.xfer?.amount")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 餘額
              input.form-control(readonly, :value="card?.xfer?.ev")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 轉乘前群組
              input.form-control(readonly, :value="card?.xfer?.before")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 轉乘後群組
              input.form-control(readonly, :value="card?.xfer?.after")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 轉乘代碼
              input.form-control(readonly, :value="card?.xfer?.group")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 地點
              input.form-control(readonly, :value="card?.xfer?.location")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 設備編號
              input.form-control(readonly, :value="card?.xfer?.device")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center DFU
              input.form-control(readonly, :value="card?.xfer?.dfu")
        .form-group(v-for="txn of [card?.credit]")
          label 最近加值交易
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 交易序號
              input.form-control(readonly, :value="txn?.tsqn")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 時間
              input.form-control(readonly, :value="txn?.time")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 交易類別
              input.form-control(readonly, :value="txn?.type")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 加值金額
              input.form-control(readonly, :value="txn?.amount")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 餘額
              input.form-control(readonly, :value="txn?.ev")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 業者
              input.form-control(readonly, :value="txn?.provider")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 地點
              input.form-control(readonly, :value="txn?.location")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 設備編號
              input.form-control(readonly, :value="txn?.device")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center RFU
              input.form-control(readonly, :value="txn?.rfu")
        .form-group
          label 最近扣款交易
          .table-responsive
            table.table.table-sm.table-bordered.table-striped.text-center
              thead: tr.text-nowrap
                th #
                th 時間
                th 類別
                th 扣款
                th 餘額
                th 業者
                th 地點
                th 設備
                th RFU
              tbody
                tr(v-for="txn of card?.deducts")
                  th {{ txn?.tsqn }}
                  td {{ txn?.time }}
                  td {{ txn?.type }}
                  td {{ txn?.amount }}
                  td {{ txn?.ev }}
                  td {{ txn?.provider }}
                  td {{ txn?.location }}
                  td {{ txn?.device }}
                  td {{ txn?.rfu }}
        .form-group
          label 公車紀錄
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 操作員編號
              input.form-control(readonly, :value="card?.bus?.agent")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 路線編號
              input.form-control(readonly, :value="card?.bus?.line")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 時間
              input.form-control(readonly, :value="card?.bus?.time")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 站牌編號
              input.form-control(readonly, :value="card?.bus?.station")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 區段編號
              input.form-control(readonly, :value="card?.bus?.zone")
        .form-group
          label 進出站紀錄
          .table-responsive
            table.table.table-sm.table-bordered.table-striped.text-center
              thead: tr.text-nowrap
                th 時間
                th 進出站
                th 業者
                th 地點
                th 累計次數
                th 累計金額
              tbody
                tr(v-for="inout of card?.inouts")
                  td {{ inout?.time }}
                  td {{ inout?.type }}
                  td {{ inout?.provider }}
                  td {{ inout?.location }}
                  td {{ inout?.count }}
                  td {{ inout?.amount }}
        .form-group
          label Mifare 卡片金鑰
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6: .input-group.input-group-sm(@click="btnCopy(card?.keya)")
              .input-group-prepend: span.input-group-text.justify-content-center keyA
              textarea.form-control(readonly, rows="16", :value="card?.keya")
            .mb-1.px-1.col-12.col-md-6: .input-group.input-group-sm(@click="btnCopy(card?.keyb)")
              .input-group-prepend: span.input-group-text.justify-content-center keyB
              textarea.form-control(readonly, rows="16", :value="card?.keyb")
      .form-group(style="min-width: 260px")
        label EML (HEX)
        textarea.form-control.form-control-sm(rows="65", v-model="h.eml")

block script
  script(crossorigin="anonymous", src="https://taichunmin.idv.tw/proxmark3.js/proxmark3.min.js")
  script.
    const { Packet } = window.Proxmark3
    Packet.prototype.getFatNo = function (pos) {
      const u24 = this.getUint24(pos, false)
      return ((u24 & 0x1FE00) >> 9) | ((u24 & 0x1FE) << 7) | ((u24 & 0x1) << 16)
    }
    Packet.prototype.setFatNo = function (pos, u24) {
      this.setUint24(pos, ((u24 & 0x10000) >> 16) | ((u24 & 0xFF00) >> 7) | ((u24 & 0xFF) << 9), false)
    }
    Packet.prototype.getUnixStr = function (pos) {
      return dayjs.unix(this.getUint32(pos) - 28800).format('YYYY-MM-DD HH:mm:ss')
    }
    Packet.prototype.getDosDateStr = function (pos) {
      const u16 = this.getUint16(pos)
      if (!u16) return '無資料'
      return dayjs(`${1980 + (u16 >> 9)}-${(u16 >> 5) & 0xF}-${u16 & 0x1F}`).format('YYYY-MM-DD')
    }
    const URL_GIST = 'https://gist.githubusercontent.com/taichunmin/f4699905e583354b2cbd1a6e67484235/raw'
    class Easycard {
      constructor (pack) {
        if (!(pack instanceof Packet) || pack.byteLength !== 1024) throw new TypeError('invalid pack')
        this.pack = pack

        // 解讀 File Allocation Table
        const fatpos = _.maxBy([384, 400], pos => this.pack.getFatNo(pos + 12))
        this.fatblk = this.pack.subarray(fatpos, fatpos + 16)
        this.isStale = _.flatten(_.times(8, i => _.times(8, j => (this.fatblk[i] & (0x80 >> j)) ? 1 : 0)))
        this.bus = this.getBus() // 公車紀錄
        this.credit = this.getTxn(160) // 最近加值交易
        this.inouts = this.getInouts() // 進出站紀錄
        this.tsqnblk = this.getFreshBlk(12, 26)
        this.xferblk = this.getFreshBlk(13, 14)
        this.deducts = _.chain([16, 17, 18, 20, 21, 22]).map(blk => this.getTxn(blk << 4)).sortBy(['time']).value() // 最近扣款交易
      }

      static fromEml (eml) {
        const card = Packet.fromHex(eml.replace(/-/g, '0'))
        if (card.byteLength !== 1024) throw new TypeError('錯誤的 eml')
        return new Easycard(card)
      }

      makeTxnWithXfer ({ cost = 0, time, group = 0 }) { // 進行轉乘交易
        const pack = this.pack.slice() // 複製卡片資料
        const cur = {}
        const next = {}
        // 讀取 FAT 資料並解析
        const getblkByPos = pos => pack.subarray(pos, pos + 16)
        ;[next.fat, cur.fat] = _.map(_.sortBy([384, 400], pos => pack.getFatNo(pos + 12)), getblkByPos)
        cur.stale = _.flatten(_.times(8, i => _.times(8, j => (cur.fat[i] & (0x80 >> j)) ? 1 : 0)))
        next.stale = cur.stale.slice()

        ;[cur.tsqn, next.tsqn] = _.map(_.sortBy([12, 26], blk => cur.stale[blk]), blk => getblkByPos(blk << 4))
        ;[cur.xfer, next.xfer] = _.map(_.sortBy([13, 14], blk => cur.stale[blk]), blk => getblkByPos(blk << 4))

        // 取得最新的交易紀錄 及 最舊的扣值交易
        const txnSortKey = pos => {
          let tsqn = (cur.tsqn[1] << 8) | pack[pos]
          if (tsqn > cur.tsqn.getUint16(0)) tsqn -= 256
          return tsqn * 0x100000000 + pack.getUint32(pos + 1)
        }
        cur.txn = getblkByPos(_.maxBy([160, 256, 272, 288, 320, 336, 352], txnSortKey))
        next.txn = getblkByPos(_.minBy([256, 272, 288, 320, 336, 352], txnSortKey))

        // 更新餘額
        pack.setInt32(128, pack.getInt32(128) - cost) // cost
        for (const pos of [136, 144, 152]) pack.setInt32(pos, pack.getInt32(128))
        for (const pos of [132, 148]) pack.setInt32(pos, ~pack.getInt32(128))

        // 產生新的交易序號
        const isSameDate = (t1, t2) => _.floor(t1 / 86400) === _.floor(t2 / 86400)
        next.tsqn.setUint16(0, cur.tsqn.getUint16(0) + 1) // tsqn
        next.tsqn[2] = (isSameDate(time, cur.txn.getUint32(1)) ? cur.tsqn[2] : 0) + 1 // 日交易次數
        next.tsqn.set(cur.tsqn.subarray(3, 16), 3)
        for (const blk of [12, 26]) next.stale[blk] = 1 - next.stale[blk] // tsqn

        // 產生新的交易紀錄
        next.txn[0] = next.tsqn[0] // tsqn (1 byte)
        next.txn.setUint32(1, time) // time
        next.txn[5] = 0x20 // txn type
        next.txn.setUint16(6, cost) // cost
        next.txn.set(pack.subarray(128, 130), 8) // ev
        next.txn.set(Packet.fromHex('600103306000'), 10) // spid, locId, deviceId, rfu

        // 設定轉乘群組
        if (group > 0) {
          next.tsqn[12] = (cur.xfer[10] & 0xF) === 15 ? cur.tsqn[13] : (cur.xfer[10] & 0xF)
          next.tsqn[13] = group
          next.xfer[0] = next.tsqn[0] // tsqn (1 byte)
          next.xfer.set(next.txn.subarray(1, 16), 1) // copy from next.txn
          next.xfer[10] = (_.clamp(next.tsqn[12], 15) << 4) | _.clamp(next.tsqn[13], 15)
          for (const blk of [13, 14]) next.stale[blk] = 1 - next.stale[blk] // xfer
        }

        // 維護 fat
        next.fat.set(cur.fat)
        for (let i = 0; i < 8; i++) {
          next.fat[i] = 0
          for (let j = 0; j < 8; j++) next.fat[i] |= next.stale[i * 8 + j] ? (0x80 >> j) : 0
        }
        next.fat.setFatNo(12, next.fat.getFatNo(12) + 1)
        next.fat[15] = 0
        for (const byte of next.fat.subarray(0, 15)) next.fat[15] ^= byte

        return new Easycard(pack)
      }

      getFreshBlk (blk1, blk2) {
        const pos = (this.isStale[blk1] ? blk2 : blk1) << 4
        return this.pack.subarray(pos, pos + 16)
      }

      getTxn (pos) { // 16 bytes: 47 3CD47362 30 0100 EB0D 55 01 6C70FF 00
        const pack = this.pack
        return {
          ...this.getSploc(pos + 10),
          tsqn: `0x${pack.subarray(pos, pos + 1).hex}`,
          tsqnUint: pack.getUint8(pos),
          time: this.pack.getUnixStr(pos + 1),
          type: this.getTxnType(pos + 5),
          amount: pack.getInt16(pos + 6),
          ev: pack.getInt16(pos + 8),
          device: `0x${pack.subarray(pos + 12, pos + 15).rhex}`,
          rfu: `0x${pack.subarray(pos + 15, pos + 16).hex}`,
        }
      }

      getBus () {
        const busblk = this.getFreshBlk(45, 46)
        return {
          agent: `0x${busblk.subarray(3, 5).rhex}`,
          line: `0x${busblk.subarray(5, 7).hex}`,
          time: busblk.getUnixStr(7),
          station: busblk.getUint8(11),
          zone: busblk.getUint8(12),
        }
      }

      getInouts () { // 捷運
        const blks = _.compact([
          this.getFreshBlk(29, 30),
          this.getFreshBlk(49, 50),
        ])
        const sploc = window.EasycardData?.sploc ?? {}
        const mrtsploc = {
          0: sploc[2], // 台北捷運
          100: sploc[100], // 台鐵
          103: sploc[103], // 桃園捷運
          105: sploc[105], // 台中捷運
          107: sploc[107], // 高雄捷運
          200: sploc[200], // 捷運貓空
        }

        const mrts = []
        for (const blk of blks) {
          if (!blk.getUint32(9)) continue
          const [sp, loc] = [blk.getUint8(15), blk.getUint8(4)]
          mrts.push({
            provider: `${sp}: ${mrtsploc[sp]?.[loc]?.provider ?? '未知'}`,
            location: `${loc}: ${mrtsploc[sp]?.[loc]?.location ?? '未知'}`,
            amount: blk.getUint16(6, false), // 捷運累計金額
            count: blk.getUint8(5), // 捷運累計次數
            time: blk.getUnixStr(9),
            type: `${'出進'[blk.getUint8(3)]}站`, // 進出站
          })
        }
        return _.sortBy(mrts, ['time'])
      }

      getSploc (pos) {
        const pack = this.pack
        const sploc = _.get(window, ['EasycardData', 'sploc'], [])
        const [sp, loc] = [pack[pos], pack[pos + 1]]
        const name = sploc[sp]?.[loc] ?? sploc?.[sp]?.[0] ?? {}
        return { provider: `${sp}: ${name.provider ?? '未知'}`, location: `${loc}: ${name.location ?? '未知'}` }
      }

      getNameU8 (key, pos) {
        const ecc = window.EasycardData ?? {}
        const hex = this.pack.subarray(pos, pos + 1).hex
        return `0x${hex}: ${_.get(ecc, [key, hex], '未知')}`
      }

      getTxnType (pos) { return this.getNameU8('txnTypes', pos) }

      get usageControl () {
        const FLAG_NAMES = ['已啟用', '被封鎖', '已退卡', '自動加值', 'Credit']
        const flag = this.pack.getUint8(24) | this.tsqnblk.getUint8(7)
        return _.filter(FLAG_NAMES, (v, k) => (flag >> k) & 1).join()
      }

      get keya () {
        const pack = this.pack
        return _.uniq(_.times(16, i => pack.subarray((i << 6) + 48, (i << 6) + 54).hex)).join('\n')
      }

      get keyb () {
        const pack = this.pack
        return _.uniq(_.times(16, i => pack.subarray((i << 6) + 58, (i << 6) + 64).hex)).join('\n')
      }

      get eml () {
        const pack = this.pack
        return _.times(64, i => pack.subarray(i << 4, (i + 1) << 4).hex).join('\n')
      }

      get xfer () {
        const { tsqnblk, xferblk } = this
        const getXferName = offset => {
          let hex = `0${xferblk.subarray(10, 11).hex[offset]}`
          if (hex === '0F') hex = tsqnblk.subarray(offset + 12, offset + 13).hex
          const xferName = window.EasycardData?.xferGroups?.[hex]
          return xferName ? `0x${hex}: ${xferName}` : `0x${hex}`
        }
        const sploc = window.EasycardData?.sploc ?? {}
        const afterloc = {
          0x01: sploc[2], // 台北捷運
          0x07: sploc[200], // 捷運貓空
          0x08: sploc[100], // 台鐵
          0x0a: sploc[102], // 高鐵
          0x0b: sploc[103], // 桃園捷運
          0x14: sploc[107], // 高雄捷運
          0x16: sploc[105], // 台中捷運
        }
        let after = xferblk.getUint8(10) & 0xf // 舊轉乘群組
        if (after === 0xf) after = tsqnblk.getUint8(13) // 新轉乘群組
        return {
          tsqn: `0x${tsqnblk.subarray(0, 2).rhex} (${tsqnblk.getUint16(0)})`,
          before: getXferName(0),
          after: getXferName(1),
          time: xferblk.getUnixStr(1),
          type: this.getTxnType(xferblk.byteOffset + 5),
          amount: xferblk.getInt16(6),
          ev: xferblk.getInt16(8),
          group: `0x${xferblk.subarray(10, 11).hex}, 0x${tsqnblk.subarray(12, 14).hex}`,
          location: `0x${xferblk.subarray(11, 12).hex}: ${afterloc?.[after]?.[xferblk.getUint8(11)]?.location ?? '未知'}`,
          device: `0x${xferblk.subarray(12, 15).rhex}`,
          dfu: `0x${xferblk.subarray(15, 16).hex}`,
        }
      } // 轉乘群組

      get areaProfile () {
        const [area, auth] = _.map([90, 92], i => this.pack[i])
        const tmp = []
        if (area === 0x03 && auth & 0x1) tmp.push('基隆學生') // bit0: 基隆專用-學生身份認證
        if (area === 0x06) { // 連江
          if (auth & 0x2) tmp.push('連江軍警') // bit1: 馬祖專用-軍警身份認證
          // bit2~3: 身份識別旗標，與區碼搭配使用
          tmp.push(`連江${['南竿', '北竿', '東引', '莒光'][(auth >> 2) & 0b11]}`)
        }
        if (auth & 0x10) tmp.push('限制通路') // bit4: 小額消費專用-限制通路使用旗標

        // bit5~6: 身份識別旗標 2，與區碼搭配使用，以區分各縣市市民卡、認同卡 榮譽市民卡、原住民等身份
        if (area === 0x08) tmp.push(`新竹市${['市民卡', '認同卡', '榮譽市民卡'][(auth >> 5) & 0b11]}`)
        if (area === 0x0A) tmp.push(`台中${['市民', '原住民'][(auth >> 5) & 0b11]}`)
        if (area === 0x15) tmp.push(`苗栗${['市民', '原住民'][(auth >> 5) & 0b11]}`)
        if (area === 0x01) tmp.push(`台北${['市民', '65歳以上愛心'][(auth >> 5) & 0b11]}`)
        return tmp.join(',')
      } // 地區身份

      get area () { return this.getNameU8('areaCodes', 90) } // 地區
      get autoload () { return this.pack.getUint16(81) } // 自動加值
      get bank () { return this.getNameU8('bankCodes', 91) } // 加值銀行
      get welfareDate () { return this.tsqnblk.getDosDateStr(5) } // 社福日期
      get welfareUsed () { return `已用${this.tsqnblk.getUint16(3)}點` } // 社福點數
      get ev () { return this.pack.getInt32(128) } // 餘額
      get exp () { return this.pack.getUnixStr(73) } // 卡片效期
      get issued () { return this.pack.getUnixStr(69) } // 發卡時間
      get monthlyExp () { return this.tsqnblk.getDosDateStr(14) } // 月票到期日
      get profileExp () { return this.pack.getDosDateStr(88) } // 身份別到期時間
      get profileType () { return this.getNameU8('profiles', 87) } // 身份別
      get quotaDaily () { return this.pack.getUint16(83) } // 日限額金額
      get quotaDate () { return this.pack.getDosDateStr(1003) } // 日限額日期
      get quotaOnce () { return this.pack.getUint16(85) } // 日單次限額
      get quotaUsed () { return this.pack.getUint16(1005) } // 日已用限額
      get type () { return this.getNameU8('cardTypes', 93) } // 卡別
      get uid () { return this.pack.getUint32(0) } // 卡片編號
    }
    window.vm = new Vue({
      el: '#app',
      data: {
        ready: false,
        ecc: null,
        h: {
          eml: '',
          xferGroup: '00',
          xferCost: 0,
          xferTime: '',
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'h', { ...this.h, ...saved })
        } catch (err) {}
        this.$watch('h', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.h))
        }, { deep: true })

        await this.init()
      },
      computed: {
        card () {
          try {
            if (!this.ready) return
            return Easycard.fromEml(this.h.eml)
          } catch (err) {
            console.error(err)
          }
        },
      },
      methods: {
        async init () {
          try {
            await Promise.all([
              this.initSploc(), // 讀取 sp_loc_mapping.csv
              this.initMappingJson5(), // 讀取 mapping.json5
            ])
            this.ready = true
          } catch (err) {
            console.error(err)
            Swal.fire({ icon: 'error', title: '發生錯誤', text: err.message })
          }
        },
        async initSploc () {
          const rows = await this.getCsv(`${URL_GIST}/sp_loc_mapping.csv`)
          _.set(window, 'EasycardData.sploc', {})
          const sploc = window.EasycardData.sploc
          for (const row of rows) {
            if (!sploc[row.spId]) sploc[row.spId] = {}
            sploc[row.spId][row.locId] = {
              provider: _.trim(row.spName),
              location: _.trim(row.locName),
            }
          }
        },
        async initMappingJson5 (cachetime = 3e4) {
          const json5 = JSON5.parse(_.get(await axios.get(`${URL_GIST}/mapping.json5`, { params: { cachebust: _.floor(Date.now() / cachetime) } }), 'data'))
          if (!window.EasycardData) window.EasycardData = {}
          const ecc = window.EasycardData
          _.each(json5, (pairs, key) => _.set(ecc, key, _.fromPairs(pairs)))
          this.$set(this, 'ecc', ecc)
        },
        async getCsv (url, cachetime = 3e4) {
          const csv = _.trim(_.get(await axios.get(url, {
            params: { cachebust: _.floor(Date.now() / cachetime) },
          }), 'data'))
          return _.get(Papa.parse(csv, {
            encoding: 'utf8',
            header: true,
          }), 'data', [])
        },
        async btnCopy (text, container = null) {
          if (!container) container = document.body
          const dom = document.createElement('textarea')
          dom.value = text
          container.appendChild(dom)
          dom.select()
          dom.setSelectionRange(0, 1e6) // For mobile devices
          document.execCommand('copy')
          container.removeChild(dom)
          await Swal.fire({ icon: 'success', title: '複製成功' })
        },
        async btnMakeTxnWithXfer () {
          try {
            if (!/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/.test(this.h.xferTime)) throw new TypeError('invalid time')
            if (this.h.xferCost < 0) throw new TypeError('invalid cost')
            const next = await this.card.makeTxnWithXfer({
              cost: this.h.xferCost ?? 0,
              time: dayjs(this.h.xferTime).unix() + 28800,
              group: _.parseInt(this.h.xferGroup, 16),
            })
            await this.btnCopy(next.eml)
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '發生錯誤', text: err.message })
          }
        },
        btnSetXferTimeBeforeNow (min) {
          this.$set(this.h, 'xferTime', dayjs().subtract(min, 'minute').format('YYYY-MM-DD HH:mm:ss'))
        },
      },
    })
