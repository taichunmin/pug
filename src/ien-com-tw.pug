extends /layout/dark

block beforehtml
  - const title = 'ien.com.tw 設備狀態'

block style
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .letter-spacing-n15
        letter-spacing: -1.5px

block content
  #app.my-3.container-fluid.text-monospace(v-cloak)
    h2.mb-3.text-center 現在時間 {{ cur?.format('HH:mm:ss') }}
    //- .row.mx-n1.row-cols-1.row-cols-md-2.row-cols-lg-3
    //-   .col.px-1.mb-3(v-for="ien of iens")
    //-     .card.text-monospace
    //-       .card-header.d-flex.align-items-center.px-3
    //-         a.flex-fill(target="_blank", :href="`https://ien.com.tw/portal/iengcHTML5/canvas.html?customerid=${ien.id}&page=0`") {{ ien.名稱 }} #[i.fa.fa-external-link]
    //-         small.letter-spacing-n15(:class="(cur ?? 0) - (ien.時間 ?? 0) >= 5e3 ? 'text-danger' : 'text-muted'") #[i.fa.fa-clock-o.mr-1]{{ ien.時間?.format('HH:mm:ss') ?? '?' }}
    //-       .card-body.px-2.pt-2.pb-0
    //-         .row.mx-n1
    //-           .col-6.px-1.mb-2(v-if="ien.溫度"): .input-group.input-group-sm
    //-             .input-group-prepend: span.input-group-text.letter-spacing-n15 溫度
    //-             input.form-control.text-right(readonly, :value="`${_.round(ien.溫度, 1)} ℃`")
    //-           .col-6.px-1.mb-2(v-if="ien.日照強度"): .input-group.input-group-sm
    //-             .input-group-prepend: span.input-group-text.letter-spacing-n15 日照強度
    //-             input.form-control.text-right(readonly, :value="`${_.round(ien.日照強度, 1)} W/m²`")
    //-           .col-6.px-1.mb-2(v-if="ien.RA值"): .input-group.input-group-sm
    //-             .input-group-prepend: span.input-group-text.letter-spacing-n15 RA值
    //-             input.form-control.text-right(readonly, :value="`${_.round(ien.RA值, 1)} %`")
    //-       ul.list-group.list-group-flush
    //-         li.list-group-item.p-2.d-flex.flex-column(v-for="device of ien.設備")
    //-           h6 #[i.fa.fa-sun-o] {{ device.名稱 }}
    //-           template(v-for="dp of [progressPercent(device.交流輸出功率, device.max)]")
    //-             small.row.no-gutters
    //-               .col-4.text-muted 交流輸出功率
    //-               .col-8.text-right.letter-spacing-n15 {{ _.round(device.交流輸出功率, 1) }} / {{ _.round(device.max, 1) }} ({{ _.round(dp, 1) }} %)
    //-             .progress(style="height: 0.5rem")
    //-               .progress-bar(:style="{ 'background-color': '#1fb52d', width: `${_.clamp(dp, 40)}%` }")
    //-               .progress-bar(:style="{ 'background-color': '#ebeb1f', width: `${_.clamp(dp, 60) - 40}%` }", v-if="dp >= 40")
    //-               .progress-bar(:style="{ 'background-color': '#eb631f', width: `${_.clamp(dp, 80) - 60}%` }", v-if="dp >= 60")
    //-               .progress-bar(:style="{ 'background-color': '#eb1f1f', width: `${_.clamp(dp, 100) - 80}%` }", v-if="dp >= 80")
    //-           small.mt-2.row.no-gutters
    //-             .col-3.text-muted 狀態
    //-             .col-9.mx-n1
    //-               template(v-for="status, statusIdx of device.狀態")
    //-                 span.badge.badge-pill.ml-1.badge-success(v-if="status === '2.0'", title="運轉中") {{ statusIdx + 1 }}
    //-                 span.badge.badge-pill.ml-1.badge-warning(v-else-if="status === '3.0'", title="無直流") {{ statusIdx + 1 }}
    //-                 span.badge.badge-pill.ml-1.badge-danger(v-else-if="status === '4.0'", title="異常") {{ statusIdx + 1 }}
    //-                 span.badge.badge-pill.ml-1.badge-secondary(v-else, :title="`其他 (${status})`") {{ statusIdx + 1 }}

block script
  script.
    window.sleep = t => new Promise(resolve => setTimeout(resolve, t))
    window.vm = new Vue({
      el: '#app',
      data: {
        cur: null,
        devices: {},
        ienSetter: new Map(),
        invPaths: new Map(),
      },
      async mounted () {
        await this.init()
      },
      methods: {
        async init () {
          try {
            await this.initIenSetter()
            //- this.loopFn(() => this.updateIenValue())
            this.loopFn(() => this.cur = dayjs())
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '發生錯誤', text: err.message })
            location.reload()
          }
        },
        async initIenSetter () {
          const [confDevices, confInverters] = await Promise.all([
            this.getCsv('https://docs.google.com/spreadsheets/d/e/2PACX-1vTLb0um9gIogNQ9gLxtGoMDyjto1C3FoROTPS-q3nz1KQrc7lMLiAeaNVbgmwqbp4ioQ6tITfYokXgz/pub?gid=0&single=true&output=csv'), // 光電設備資料
            this.getCsv('https://docs.google.com/spreadsheets/d/e/2PACX-1vTLb0um9gIogNQ9gLxtGoMDyjto1C3FoROTPS-q3nz1KQrc7lMLiAeaNVbgmwqbp4ioQ6tITfYokXgz/pub?gid=405324759&single=true&output=csv'), // 逆變器直流迴路資料
          ])
          console.log({ confDevices, confInverters })
          for (const row of confDevices) {
            const device = {
              日照強度: null,
              交流輸出功率: null,
              溫度: null,
              invs: {},
              max: _.toSafeInteger(row.交流輸出功率上限),
              name: row.名稱,
              RA值: null,
            }
            if (!device.max || !device.name) continue

            for (let [field, uuid] of _.toPairs(row)) {
              uuid = _.trim(uuid)
              if (!/^[0-9a-fA-F]{32}$/.test(uuid)) continue

              if (/^逆變器\d+$/.test(field)) { // 設定逆變器狀態
                const invNo = _.toSafeInteger(field.slice(3))
                device.invs[invNo] = { 狀態: null, directNoMax: 0, 直流輸入電流: {} }
                this.invPaths.set(uuid, [device.name, invNo])
                this.ienSetter.set(uuid, ({ newVal, nowts }) => {
                  const tmp = this?.devices?.[device.name]?.invs?.[invNo]
                  if (!tmp) return
                  this.$set(tmp, '狀態', _.toSafeInteger(newVal))
                })
              } else if (_.includes(['溫度', '日照強度', 'RA值', '交流輸出功率'], field)) {
                this.ienSetter.set(uuid, ({ newVal, nowts }) => {
                  const tmp = this?.devices?.[device.name]
                  if (!tmp) return
                  this.$set(tmp, field, _.toFinite(newVal))
                })
              }
            }
            this.$set(this.devices, device.name, device)
          }

          for (const row of confInverters) {
            const invUuid = row.逆變器
            if (!/^[0-9a-fA-F]{32}$/.test(invUuid)) continue
            const [deviceName, invNo] = this.invPaths.get(invUuid)
            const inv = this?.devices?.[deviceName]?.invs?.[invNo]
            if (!inv) continue

            for (let [field, uuid] of _.toPairs(row)) {
              uuid = _.trim(uuid)
              if (!/^[0-9a-fA-F]{32}$/.test(uuid)) continue

              if (/^直流輸入電流\d+$/.test(field)) { // 設定直流輸入電流
                const directNo = _.toSafeInteger(field.slice(6))
                this.$set(inv, 'directNoMax', Math.max(inv.directNoMax, directNo))
                this.ienSetter.set(uuid, ({ newVal, nowts }) => {
                  const tmp = this?.devices?.[deviceName]?.invs?.[invNo]
                  if (!tmp) return
                  this.$set(tmp.直流輸入電流, directNo, _.toSafeInteger(newVal))
                })
              }
            }
          }
        },
        async loopFn (fn, tsSleep = 500) {
          if (!fn || !_.isFunction(fn)) return
          while (true) {
            await fn()
            await sleep(tsSleep)
          }
        },
        async updateIenValue () {
          try {
            const reqdata = `<?xml version='1.0' encoding='UTF-8'?><request xmlns='http://chttl.com/iengc/core' method='getTagValue' customerid='2944' querylevel='1'>` + _.map([...this.ienSetter.keys()], key => `<tag id='${key}'/>`).join('') + `</request>`
            const resxml = _.get(await axios.post('https://ien.com.tw/portal/GraphicController', Qs.stringify({ data: reqdata }), {
              headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' },
            }), 'data')
            const nowts = dayjs()
            for (const match of resxml.matchAll(/id="([^"]+)"[^>]+result="([^"]+)"[^>]+value="([^"]+)"/g)) {
              try {
                this.ienSetter.get(match[1])?.({
                  newVal: match[2] === '0' ? match[3] : null,
                  nowts,
                })
              } catch (err) {
                console.error(err)
                console.log(`match = ${JSON.stringify(match.slice(1))}`)
              }
            }
          } catch (err) {
            console.error(err)
          }
        },
        async getCsv (url, cachetime = 3e4) {
          const csv = _.trim(_.get(await axios.get(url, {
            params: { cachebust: _.floor(Date.now() / cachetime) },
          }), 'data'))
          return _.get(Papa.parse(csv, {
            encoding: 'utf8',
            header: true,
          }), 'data', [])
        },
        progressPercent (numerator, denominator) {
          ;[numerator, denominator] = _.map([numerator, denominator], _.toFinite)
          const percent = _.clamp(numerator / denominator * 100, 100)
          return _.isNaN(percent) ? 0 : percent
        },
      },
    })
