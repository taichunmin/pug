extends /layout/dark

block beforehtml
  - const title = 'NFC EasyCard Viewer'

block style
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      #card
        &, input.form-control
          letter-spacing: -1px
        textarea.form-control
          font-size: 12px
        .input-group-prepend .input-group-text
          letter-spacing: -2px
          min-width: 80px

block content
  #app.my-3.container-fluid(v-cloak)
    h2.mb-3.text-center=title
    #card.text-monospace.d-flex.flex-column.flex-md-row
      .mr-sm-3
        .form-group
          label 卡片基本資料
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 卡片編號
              input.form-control(readonly, :value="card?.uid")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 交易序號
              input.form-control(readonly, :value="card?.tsqn")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 餘額
              input.form-control(readonly, :value="card?.ev")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 預設加值
              input.form-control(readonly, :value="card?.autoload")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 加值銀行
              input.form-control(readonly, :value="card?.bank")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 每日限額
              input.form-control(readonly, :value="card?.quotaDaily")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 單次限額
              input.form-control(readonly, :value="card?.quotaOnce")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 限額日期
              input.form-control(readonly, :value="card?.quotaDate")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 已用限額
              input.form-control(readonly, :value="card?.quotaUsed")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 身份別
              input.form-control(readonly, :value="card?.profileType")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 身份到期
              input.form-control(readonly, :value="card?.profileExp")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 卡別
              input.form-control(readonly, :value="card?.type")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 區碼
              input.form-control(readonly, :value="card?.area")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 發卡時間
              input.form-control(readonly, :value="card?.issued")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 卡片效期
              input.form-control(readonly, :value="card?.exp")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 月票到期日
              input.form-control(readonly, :value="card?.monthlyExp")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 優待票日期
              input.form-control(readonly, :value="card?.concessionDate")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 優待票點數
              input.form-control(readonly, :value="card?.concessionPoint")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 票卡狀態
              input.form-control(readonly, :value="card?.usageControl")
        .form-group
          label 轉乘紀錄
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 交易序號
              input.form-control(readonly, :value="card?.xfer?.tsqn")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 時間
              input.form-control(readonly, :value="card?.xfer?.time")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 交易類別
              input.form-control(readonly, :value="card?.xfer?.type")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 扣款
              input.form-control(readonly, :value="card?.xfer?.amount")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 餘額
              input.form-control(readonly, :value="card?.xfer?.ev")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 轉乘前群組
              input.form-control(readonly, :value="card?.xfer?.before")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 轉乘後群組
              input.form-control(readonly, :value="card?.xfer?.after")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 舊轉乘群組
              input.form-control(readonly, :value="card?.xfer?.old")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 地點
              input.form-control(readonly, :value="card?.xfer?.location")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 設備編號
              input.form-control(readonly, :value="card?.xfer?.device")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center DFU
              input.form-control(readonly, :value="card?.xfer?.dfu")
        .form-group(v-for="txn of [card?.credit]")
          label 最近加值交易
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 交易序號
              input.form-control(readonly, :value="txn?.tsqn")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 時間
              input.form-control(readonly, :value="txn?.time")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 交易類別
              input.form-control(readonly, :value="txn?.type")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 加值金額
              input.form-control(readonly, :value="txn?.amount")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 餘額
              input.form-control(readonly, :value="txn?.ev")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 業者
              input.form-control(readonly, :value="txn?.provider")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 地點
              input.form-control(readonly, :value="txn?.location")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 設備編號
              input.form-control(readonly, :value="txn?.device")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center RFU
              input.form-control(readonly, :value="txn?.rfu")
        .form-group
          label 最近扣款交易
          .table-responsive
            table.table.table-sm.table-bordered.table-striped.text-center
              thead: tr.text-nowrap
                th #
                th 時間
                th 類別
                th 扣款
                th 餘額
                th 業者
                th 地點
                th 設備
                th RFU
              tbody
                tr(v-for="txn of card?.deducts")
                  th {{ txn?.tsqn }}
                  td {{ txn?.time }}
                  td {{ txn?.type }}
                  td {{ txn?.amount }}
                  td {{ txn?.ev }}
                  td {{ txn?.provider }}
                  td {{ txn?.location }}
                  td {{ txn?.device }}
                  td {{ txn?.rfu }}
        .form-group(v-for="bus, busId of card?.buses")
          label 公車{{ '上下'[busId] }}車紀錄
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 操作員編號
              input.form-control(readonly, :value="bus?.agent")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 路線編號
              input.form-control(readonly, :value="bus?.line")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 時間
              input.form-control(readonly, :value="bus?.time")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 站牌編號
              input.form-control(readonly, :value="bus?.station")
            .mb-1.px-1.col-12.col-md-6.col-lg-4.col-xl-3: .input-group.input-group-sm
              .input-group-prepend: span.input-group-text.justify-content-center 區段編號
              input.form-control(readonly, :value="bus?.zone")
        .form-group
          label 進出站紀錄
          .table-responsive
            table.table.table-sm.table-bordered.table-striped.text-center
              thead: tr.text-nowrap
                th 時間
                th 進出站
                th 業者
                th 地點
                th 累計次數
                th 累計金額
              tbody
                tr(v-for="mrt of card?.mrts")
                  td {{ mrt?.time }}
                  td {{ mrt?.type }}
                  td {{ mrt?.provider }}
                  td {{ mrt?.location }}
                  td {{ mrt?.count }}
                  td {{ mrt?.amount }}
        .form-group
          label Mifare 卡片金鑰
          .row.mx-n1
            .mb-1.px-1.col-12.col-md-6: .input-group.input-group-sm(@click="btnCopy(card?.keya)")
              .input-group-prepend: span.input-group-text.justify-content-center keyA
              textarea.form-control(readonly, rows="16", :value="card?.keya")
            .mb-1.px-1.col-12.col-md-6: .input-group.input-group-sm(@click="btnCopy(card?.keyb)")
              .input-group-prepend: span.input-group-text.justify-content-center keyB
              textarea.form-control(readonly, rows="16", :value="card?.keyb")
      .form-group(style="min-width: 250px")
        label EML (HEX)
        textarea.form-control.form-control-sm(rows="65", v-model="h.eml")

block script
  script(crossorigin="anonymous", src="https://taichunmin.idv.tw/proxmark3.js/proxmark3.min.js")
  script.
    const { BufferLE } = window.Proxmark3
    const URL_GIST = 'https://gist.githubusercontent.com/taichunmin/f4699905e583354b2cbd1a6e67484235/raw'
    class Easycard {
      constructor (buf) {
        if (!buf || !(buf instanceof BufferLE) || buf.byteLength !== 1024) throw new TypeError('invalid buf')
        this.buf = buf
        this.payload = this.getPayload()
        this.credit = this.getTxn(160) // 最近加值交易
        this.deducts = _.chain([16, 17, 18, 20, 21, 22]).map(blk => this.getTxn(blk << 4)).sortBy(['time']).value() // 最近扣款交易
        this.buses = _.map([45, 46], blk => this.getBus(blk << 4)) // 公車上下車紀錄
        this.mrts = _.chain([29, 30, 49, 50]).map(blk => this.getMrt(blk << 4)).compact().sortBy(['time']).value()
      }

      static fromEml (eml) {
        eml = eml.replace(/-/g, '0').replace(/[^0-9A-Fa-f]/g, '')
        if (eml.length !== 2048) throw new TypeError('錯誤的 eml')
        return new Easycard(BufferLE.fromHex(eml))
      }

      getPayload () {
        const buf = this.buf
        // 根據交易序號取得正確的後設資料
        const pos = buf.getUint16(192) > buf.getUint16(416) ? [192, 400] : [416, 384]
        // 找到最新轉乘交易資料
        pos.push(buf.getUint32(209) > buf.getUint32(225) ? 208 : 224)
        const payload = new BufferLE(pos.length << 4)
        for (let i = 0; i < pos.length; i++) payload.set(buf.subarray(pos[i], pos[i] + 16), i << 4)
        return payload
      }

      getTxn (pos) { // 16 bytes: 47 3CD47362 30 0100 EB0D 55 01 6C70FF 00
        const buf = this.buf
        return {
          ...this.getSploc(pos + 10),
          tsqn: `0x${buf.subarray(pos, pos + 1).hex}`,
          tsqnUint: buf.getUint8(pos),
          time: this.getUnixStr(this.buf, pos + 1),
          type: this.getTxnType(pos + 5),
          amount: buf.getInt16(pos + 6),
          ev: buf.getInt16(pos + 8),
          device: `0x${buf.subarray(pos + 12, pos + 15).rhex}`,
          rfu: `0x${buf.subarray(pos + 15, pos + 16).hex}`,
        }
      }

      getBus (pos) {
        const buf = this.buf
        return {
          agent: `0x${buf.subarray(pos + 3, pos + 5).rhex}`,
          line: `0x${buf.subarray(pos + 5, pos + 7).hex}`,
          time: this.getUnixStr(this.buf, pos + 7),
          station: buf.getUint8(pos + 11),
          zone: buf.getUint8(pos + 12),
        }
      }

      getMrt (pos) { // 捷運
        const buf = this.buf
        if (!buf.getUint32(pos + 9)) return // 無資料

        const sploc = window.EasycardData?.sploc ?? {}
        const mrtsploc = {
          0: sploc[2], // 台北捷運
          100: sploc[100], // 台鐵
          103: sploc[103], // 桃園捷運
          105: sploc[105], // 台中捷運
          107: sploc[107], // 高雄捷運
          200: sploc[200], // 捷運貓空
        }

        const [sp, loc] = [buf.getUint8(pos + 15), buf.getUint8(pos + 4)]
        return {
          provider: mrtsploc[sp]?.[loc]?.provider ?? `${sp}`,
          location: mrtsploc[sp]?.[loc]?.location ?? `${loc}`,
          amount: buf.getUint16(pos + 6, false), // 捷運累計金額
          count: buf.getUint8(pos + 5), // 捷運累計次數
          time: this.getUnixStr(this.buf, pos + 9),
          type: `${'出進'[buf.getUint8(pos + 3)]}站`, // 進出站
        }
      }

      getUnixStr (buf, pos) {
        return dayjs.unix(buf.getUint32(pos) - 28800).format('YYYY-MM-DD HH:mm:ss')
      }

      getDosDateStr (buf, pos) {
        const u16 = buf.getUint16(pos)
        if (!u16) return '無資料'
        return dayjs(`${1980 + (u16 >> 9)}-${(u16 >> 5) & 0xF}-${u16 & 0x1F}`).format('YYYY-MM-DD')
      }

      getSploc (pos) {
        const buf = this.buf
        const sploc = window.EasycardData?.sploc ?? {}
        const [sp, loc] = [buf.getUint8(pos), buf.getUint8(pos + 1)]
        return sploc[sp]?.[loc] ?? sploc?.[sp]?.[0] ?? { provider: `${sp}`, location: `${loc}` }
      }

      getNameU8 (key, pos) {
        const hex = this.buf.subarray(pos, pos + 1).hex
        return window.EasycardData?.[key]?.[hex] ?? `0x${hex}`
      }

      getAuthProfile (pos) { return this.getNameU8('authProfiles', pos) }
      getTxnType (pos) { return this.getNameU8('txnTypes', pos) }

      get usageControl () {
        const FLAG_NAMES = ['已啟用', '被封鎖', '已退卡', '自動加值', 'Credit']
        const flag = this.buf.getUint8(24)
        return _.filter(FLAG_NAMES, (v, k) => (flag >> k) & 1).join()
      }

      get keya () {
        const buf = this.buf
        return _.uniq(_.times(16, i => buf.subarray((i << 6) + 48, (i << 6) + 54).hex)).join('\n')
      }

      get keyb () {
        const buf = this.buf
        return _.uniq(_.times(16, i => buf.subarray((i << 6) + 58, (i << 6) + 64).hex)).join('\n')
      }

      get xfer () {
        const payload = this.payload
        const getXferCode = pos => {
          const hex = payload.subarray(pos, pos + 1).hex
          return window.EasycardData?.xferCodes?.[hex] ?? `0x${hex}`
        }
        const sploc = window.EasycardData?.sploc ?? {}
        const afterloc = {
          0x01: sploc[2], // 台北捷運
          0x07: sploc[200], // 捷運貓空
          0x08: sploc[100], // 台鐵
          0x0a: sploc[102], // 高鐵
          0x0b: sploc[103], // 桃園捷運
          0x14: sploc[107], // 高雄捷運
          0x16: sploc[105], // 台中捷運
        }
        let after = payload.getUint8(42) & 0xf // 舊轉乘群組
        if (after === 0xf) after = payload.getUint8(13) // 新轉乘群組
        return {
          tsqn: `0x${payload.subarray(32, 33).rhex}`,
          before: getXferCode(12),
          after: getXferCode(13),
          time: this.getUnixStr(payload, 33),
          type: `0x${payload.subarray(37, 38).hex}`,
          amount: payload.getInt16(38),
          ev: payload.getInt16(40),
          old: `0x${payload.subarray(42, 43).hex}`,
          location: afterloc?.[after]?.[payload.getUint8(43)]?.location ?? `0x${payload.subarray(43, 44).hex}`,
          device: `0x${payload.subarray(44, 47).rhex}`,
          dfu: `0x${payload.subarray(47, 48).hex}`,
        }
      } // 轉乘群組

      get area () { return this.getNameU8('areaCodes', 90) } // 區碼
      get autoload () { return this.buf.getUint16(81) } // 自動加值
      get bank () { return this.getNameU8('bankCodes', 91) } // 加值銀行
      get concessionDate () { return this.getDosDateStr(this.payload, 5) } // 優待票日期
      get concessionPoint () { return this.payload.getUint16(3) } // 優待票點數
      get ev () { return this.buf.getInt32(128) } // 餘額
      get exp () { return this.getUnixStr(this.buf, 73) } // 有效時間
      get issued () { return this.getUnixStr(this.buf, 69) } // 製造時間
      get monthlyExp () { return this.getDosDateStr(this.payload, 14) } // 月票到期日
      get profileExp () { return this.getUnixStr(this.buf, 961) } // 身份別到期時間
      get profileType () { return this.getNameU8('profiles', 960) } // 身份別
      get quotaDaily () { return this.buf.getUint16(83) } // 日限額金額
      get quotaDate () { return this.getDosDateStr(this.buf, 1003) } // 日限額日期
      get quotaOnce () { return this.buf.getUint16(85) } // 日單次限額
      get quotaUsed () { return this.buf.getUint16(1005) } // 日已用限額
      get tsqn () { return `0x${this?.xfer?.tsqn} (${this.payload.getUint16(0)})` } // 交易序號
      get type () { return this.getNameU8('cardTypes', 93) } // 卡別
      get uid () { return this.buf.subarray(0, 4).rhex } // 卡片編號
    }
    window.vm = new Vue({
      el: '#app',
      data: {
        ready: false,
        h: {
          eml: '',
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'h', { ...this.h, ...saved })
        } catch (err) {}
        this.$watch('h', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.h))
        }, { deep: true })

        await this.init()
      },
      computed: {
        card () {
          try {
            if (!this.ready) return
            return Easycard.fromEml(this.h.eml)
          } catch (err) {
            console.error(err)
          }
        },
      },
      methods: {
        async init () {
          try {
            await Promise.all([
              this.initSploc(), // 讀取 sp_loc_mapping.csv
              this.initMappingJson5(), // 讀取 mapping.json5
            ])
            this.ready = true
          } catch (err) {
            console.error(err)
            Swal.fire({ icon: 'error', title: '發生錯誤', text: err.message })
          }
        },
        async initSploc () {
          const rows = await this.getCsv(`${URL_GIST}/sp_loc_mapping.csv`)
          _.set(window, 'EasycardData.sploc', {})
          const sploc = window.EasycardData.sploc
          for (const row of rows) {
            if (!sploc[row.spId]) sploc[row.spId] = {}
            sploc[row.spId][row.locId] = {
              provider: _.trim(row.spName),
              location: _.trim(row.locName),
            }
          }
        },
        async initMappingJson5 () {
          const json5 = JSON5.parse(_.get(await axios.get(`${URL_GIST}/mapping.json5`), 'data'))
          window.EasycardData = {}
          _.each(json5, (val, key) => { _.set(window, `EasycardData.${key}`, val) })
        },
        async getCsv (url, cachetime = 3e4) {
          const csv = _.trim(_.get(await axios.get(url, {
            params: { cachebust: _.floor(Date.now() / cachetime) },
          }), 'data'))
          return _.get(Papa.parse(csv, {
            encoding: 'utf8',
            header: true,
          }), 'data', [])
        },
        async btnCopy (text, container = null) {
          if (!container) container = document.body
          const dom = document.createElement('textarea')
          dom.value = text
          container.appendChild(dom)
          dom.select()
          dom.setSelectionRange(0, 1e6) // For mobile devices
          document.execCommand('copy')
          container.removeChild(dom)
          await Swal.fire({ icon: 'success', title: '複製成功' })
        },
      },
    })
