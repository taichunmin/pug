extends /layout/bootstrapV4

block beforehtml
  - const title = '13 道線索'

block style
  meta(property="fb:app_id", content="2133031763635285")
  meta(property="og:description", content="桌遊「13 道線索」的筆記")
  meta(property="og:image:height", content="640")
  meta(property="og:image:width", content="1280")
  meta(property="og:image", content="https://i.imgur.com/evy8vZ7.png")
  meta(property="og:locale", content="zh_TW")
  meta(property="og:site_name", content="筆記國度")
  meta(property="og:title", content=title)
  meta(property="og:type", content="website")
  meta(property="og:url", content="https://taichunmin.idv.tw/pug/boardgame-13clues.html")
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .no-select
        user-select: none
      .opacity-dot5
        opacity: 0.3
      .letter-spacing-n1
        letter-spacing: -1px

block content
  #app.my-3.container.no-select(v-cloak)
    h2.mb-3.text-center #{title} ({{ h?.players?.length ?? '?' }} 人遊戲)
    .card.mt-3
      .card-header.d-flex.align-items-center.no-select(@click="minify.setting=!minify.setting")
        i.fa.fa-fw.fa-chevron-right(v-if="minify.setting")
        i.fa.fa-fw.fa-chevron-down(v-else)
        .ml-1 設定
      .card-body(v-if="!minify.setting")
        h5.card-title 刪除資料並開新遊戲
        .row.mx-n1
          .col.px-1(v-for="size of _.range(3, 7)")
            button.btn.btn-sm.btn-block.btn-outline-primary(@click="btnNewGame(size)") {{ size }} 人
    template(v-if="h.players.length >= 3")
      .card.mt-3
        .card-header.d-flex.align-items-center.no-select(@click="minify.known=!minify.known")
          i.fa.fa-fw.fa-chevron-right(v-if="minify.known")
          i.fa.fa-fw.fa-chevron-down(v-else)
          .ml-1 選擇已知卡片 #[small.text-muted (請點表格輸入)]
        ul.list-group.list-group-flush(v-if="!minify.known")
          li.list-group-item
            h6 自己
            .table-responsive.rounded
              table.table.table-bordered.table-sm.text-center.mb-0
                thead: tr.table-secondary
                  th(colspan="2") 屏幕內卡片
                tbody: tr(@click="btnPickMyself")
                  td(width="50%", v-for="card of h?.players?.[0]?.cards?.slice?.(3)", :class="_.includes(duplicated, card) ? 'table-danger' : ''") {{ CARD_NAMES[card] ?? '?' }}
          li.list-group-item
            h6 對手
            .table-responsive.rounded
              table.table.table-bordered.table-sm.text-center.mb-0
                thead: tr.table-secondary
                  th(scope="col", width="34%") #
                  th(scope="col") 人
                  th(scope="col") 地
                  th(scope="col") 武
                tbody
                  tr(v-for="player of h?.players?.slice?.(1)", @click="btnPickPlayer(player)")
                    th.table-secondary {{ player.name }}
                    td(v-for="card of _.take(player?.cards, 3)", :class="_.includes(duplicated, card) ? 'table-danger' : ''") {{ CARD_NAMES[card] ?? '?' }}
          li.list-group-item(v-if="h?.informant?.length")
            h6 線民
            .table-responsive.rounded.letter-spacing-n1
              table.table.table-bordered.table-sm.text-center.mb-0
                tbody: tr(v-for="card, informantIdx of h.informant", @click="btnPickInformant(informantIdx)")
                  th.table-secondary(width="34%") 線民 {{ 'ABCDEF'[informantIdx] }}
                  td(:class="_.includes(duplicated, card) ? 'table-danger' : ''") {{ CARD_NAMES[card] ?? '?' }}
      .card.mt-3
        .card-header.d-flex.align-items-center(@click="minify.casebook=!minify.casebook")
          i.fa.fa-fw.fa-chevron-right(v-if="minify.casebook")
          i.fa.fa-fw.fa-chevron-down(v-else)
          .ml-1 案情筆記 #[small.text-muted (請點表格切換符號)]
        .table-responsive.letter-spacing-n1(v-if="!minify.casebook", style="font-size: 90%")
          table.table.table-bordered.table-sm.text-center.mb-0
            thead: tr.table-secondary
              th(scope="col") #
              th(scope="col") 男 / 女
              th(scope="col") 內 / 外
              th(scope="col") 遠 / 近
            tbody
              tr(v-for="i of _.range(4 + h.players.length)")
                th.table-secondary(scope="row") {{ CARD_NAMES[i][0] }}
                template(v-for="j of _.range(i, i + 30, 10)")
                  td.px-0.opacity-dot5(v-if="!_.includes(unknown, j)", @click="nothing")
                    i.fa.fa-fw.mr-1.fa-times
                    | {{ CARD_NAMES[j] }}
                  td.px-0(v-else, @click="$set(h.casebook, j, (h.casebook[j] + 1) % 4)")
                    i.fa.fa-fw.mr-1(:class="['', 'fa-times text-danger', 'fa-check text-success', 'fa-question text-muted'][h.casebook[j]]")
                    | {{ CARD_NAMES[j] }}
      .card.mt-3
        .card-header.d-flex.align-items-center(@click="minify.clues=!minify.clues")
          i.fa.fa-fw.fa-chevron-right(v-if="minify.clues")
          i.fa.fa-fw.fa-chevron-down(v-else)
          .ml-1 線索筆記 #[small.text-muted (請點表格輸入)]
        .letter-spacing-n1(v-if="!minify.clues", style="font-size: 90%")
          .row.m-0
            .col-2.p-0.text-center.align-self-center 自己#[br]視角
            .col-5.p-0: table.table.table-bordered.table-sm.text-center.m-0.h-100
              tbody: tr(v-for="c of types")
                th.align-middle.table-secondary(width="33%") {{ c }}
                td.align-middle {{ myclues[c] ?? 0 }}
            .col-5.p-0: table.table.table-bordered.table-sm.text-center.m-0.h-100
              tbody: tr(v-for="c of colors")
                th.align-middle.table-secondary(width="33%") {{ c }}
                td.align-middle {{ myclues[c] ?? 0 }}
          template(v-for="player of h.players.slice(1)")
            template(v-for="tempClues of [cluesSub(publicPlayersClues, cardsToClues(_.take(player.cards, 3)))]")
              .row.m-0.border-top
                .col-2.p-0.text-center.align-self-center {{ player.name }}#[br]視角
                .col-5.p-0: table.table.table-bordered.table-sm.text-center.m-0.h-100
                  tbody: tr(v-for="c of types", @click="btnPlayerSetClue(player, c)")
                    th.align-middle.table-secondary(width="33%") {{ c }}
                    td.align-middle
                      template(v-if="!_.isNil(player?.clues?.[c])")
                        | {{ player.clues[c] }}
                        sup.text-success {{ sintToString(player.clues[c] - (tempClues[c] ?? 0)) }}
                      template(v-else) &nbsp;
                .col-5.p-0: table.table.table-bordered.table-sm.text-center.m-0.h-100
                  tbody: tr(v-for="c of colors", @click="btnPlayerSetClue(player, c)")
                    th.align-middle.table-secondary(width="33%") {{ c }}
                    td.align-middle
                      template(v-if="!_.isNil(player?.clues?.[c])")
                        | {{ player.clues[c] }}
                        sup.text-success {{ sintToString(player.clues[c] - (tempClues[c] ?? 0)) }}
                      template(v-else) &nbsp;
    .modal.fade(data-keyboard="false", tabindex="-1", ref="cardPicker")
      .modal-dialog.modal-dialog-centered.modal-xl
        .modal-content
          .modal-header
            h5.modal-title 選擇「{{ cardPicker.name }}」的卡片
            button.close(type="button", data-dismiss="modal"): span &times;
          .modal-body.p-0
            .table-responsive
              table.table.table-bordered.table-sm.text-center.mb-0
                thead: tr
                  th(scope="col") #
                  th(scope="col") 男 / 女
                  th(scope="col") 內 / 外
                  th(scope="col") 遠 / 近
                tbody
                  tr(v-for="i of _.range(4 + h.players.length)")
                    th(scope="row") {{ CARD_NAMES[i][0] }}
                    td.px-0(v-for="j of _.range(i, i + 30, 10)", :class="_.includes(cardPicker.selected, j) ? 'table-primary' : ''", @click="btnCardPickerClick(j)") {{ CARD_NAMES[j] }}
          .modal-footer
            button.btn.btn-secondary(type="button", @click="cardPicker?.cb?.()") 取消
            button.btn.btn-primary(type="button", @click="cardPicker?.cb?.(cardPicker.selected)") 確定
    .modal.fade(data-backdrop="static", data-keyboard="false", tabindex="-1", ref="cluePicker")
      .modal-dialog.modal-dialog-centered.modal-xl
        .modal-content
          .modal-header
            h6.modal-title {{ cluePicker.name }}
            button.close(type="button", data-dismiss="modal"): span &times;
          .modal-body.text-nowrap
            .row.mx-n1
              .col.px-1(v-for="cnt of _.range(4)")
                button.btn.btn-block.btn-outline-primary(@click="cluePicker?.cb?.(cnt)") {{ cnt }}
            .row.mx-n1.mt-2
              .col.px-1(v-for="cnt of _.range(4, 6)")
                button.btn.btn-block.btn-outline-primary(@click="cluePicker?.cb?.(cnt)") {{ cnt }}
              .col.px-1
                button.btn.btn-block.btn-outline-primary(@click="cluePicker?.cb?.('clear')") 清除

block script
  script.
    const CARD_NAMES = [
      '紫男', '粉男', '紅男', '綠女', '黃女', '藍女', '橘女', '白男', '棕女', '灰男', // 男女性
      '紫內', '粉外', '紅內', '綠外', '黃內', '藍外', '橘內', '白外', '棕內', '灰外', // 室內外
      '紫近', '粉遠', '紅近', '綠近', '黃遠', '藍遠', '橘遠', '白近', '棕近', '灰遠', // 遠近距
    ]
    window.vm = new Vue({
      el: '#app',
      data: {
        cardPicker: { cb: null, name: '', type: null, selected: [] },
        cluePicker: { cb: null, name: '', cur: null },
        minify: {
          casebook: false,
          clues: false,
          known: false,
          setting: false,
        },
        h: {
          informant: [],
          players: [],
          casebook: [],
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'h', { ...this.h, ...saved })
        } catch (err) {}
        this.$watch('h', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.h))
        }, { deep: true })

        await this.init()
      },
      computed: {
        types () {
          return '男女內外遠近'
        },
        colors () {
          const end = 4 + this.h.players.length
          return '紫粉紅綠黃藍橘白棕灰'.slice(0, end)
        },
        unknown () {
          const colors = 4 + this.h.players.length
          return _.difference(
            _.flatten(_.times(3, i => _.range(i * 10, i * 10 + colors))),
            _.flatten([..._.map(this.h.players, 'cards'), this.h.informant]),
          )
        },
        duplicated () {
          const tmp = new Set()
          const dup = []
          for (const card of _.flatten([..._.map(this.h.players, 'cards'), this.h.informant])) {
            if (_.isNil(card)) continue
            if (tmp.has(card)) dup.push(card)
            else tmp.add(card)
          }
          return dup.sort()
        },
        myclues () {
          const cards = _.flatten([
            this.h.players[0].cards.slice(3),
            ..._.map(this.h.players.slice(1), p => _.take(p.cards, 3)),
          ])
          return this.cardsToClues(cards)
        },
        publicPlayersClues () {
          return this.cardsToClues(_.flatten(_.map(this.h.players.slice(1), p => _.take(p.cards, 3))))
        },
      },
      methods: {
        async init () {},
        async btnNewGame (size) {
          try {
            if (!await this.confirm(`確定要刪除資料並開新的 ${size} 人遊戲嗎？`, '確定', '取消')) return
            if (!_.inRange(size, 3, 7)) throw new Error('僅支援 3~6 人的遊戲')
            const h = {
              informant: Array((6 - size) * 2).fill(null),
              casebook: Array(30).fill(0),
              players: _.times(size, i => ({
                cards: Array(5).fill(null),
                clues: {},
                name: i === 0 ? '自己' : `對手 ${i}`,
              })),
            }
            this.$set(this, 'h', { ...this.h, ...h })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '發生錯誤', text: err.message })
          }
        },
        async btnCardPickerClick (target) {
          const ctx = this.cardPicker

          const found = _.indexOf(ctx.selected, target)
          if (found >= 0) { // 取消選擇
            ctx.selected.splice(found, 1)
            return
          }

          if (ctx.type === 'myself') { // 自己
            const selected = _.takeRight([...ctx.selected, target], 2)
            this.$set(ctx, 'selected', selected)
          } else if (ctx.type === 'player') { // 對手
            const selected = _.uniqBy([target, ...ctx.selected], val => _.floor(val / 10))
            this.$set(ctx, 'selected', selected)
          } else { // 線民
            const selected = [target]
            this.$set(ctx, 'selected', selected)
          }
        },
        async btnPickMyself () {
          const $ref = window.jQuery(this.$refs.cardPicker)
          let newVal = await new Promise(resolve => {
            this.$set(this, 'cardPicker', {
              cb: resolve,
              name: '自己',
              selected: this.filterNil(this.h.players[0].cards.slice(3)),
              type: 'myself',
            })
            $ref.one('hide.bs.modal', () => resolve()).modal('show')
          })
          $ref.modal('hide')
          this.$set(this.cardPicker, 'cb', null)
          if (_.isNil(newVal)) return
          newVal = _.take([...newVal, ...Array(2).fill(null)], 2)
          this.h.players[0].cards.splice(3, 2, ...newVal)
        },
        async btnPickInformant (idx) {
          const $ref = window.jQuery(this.$refs.cardPicker)
          const newVal = await new Promise(resolve => {
            this.$set(this, 'cardPicker', {
              cb: resolve,
              name: `線民 ${'ABCDEF'[idx]}`,
              selected: [this.h.informant[idx]],
              type: 'informant',
            })
            $ref.one('hide.bs.modal', () => resolve()).modal('show')
          })
          $ref.modal('hide')
          this.$set(this.cardPicker, 'cb', null)
          if (newVal) this.$set(this.h.informant, idx, newVal[0])
        },
        async btnPickPlayer (player) {
          const $ref = window.jQuery(this.$refs.cardPicker)
          const newVal = await new Promise(resolve => {
            this.$set(this, 'cardPicker', {
              cb: resolve,
              name: player.name,
              selected: this.filterNil(_.take(player.cards, 3)),
              type: 'player',
            })
            $ref.one('hide.bs.modal', () => resolve()).modal('show')
          })
          $ref.modal('hide')
          this.$set(this.cardPicker, 'cb', null)
          if (_.isNil(newVal)) return
          player.cards.splice(0, 3, null, null, null)
          for (const card of newVal) this.$set(player.cards, _.floor(card / 10), card)
        },
        async btnPlayerSetClue (player, clueName) {
          const $ref = window.jQuery(this.$refs.cluePicker)
          const newVal = await new Promise(resolve => {
            this.$set(this, 'cluePicker', {
              cb: resolve,
              name: `「${player.name}」看到了幾張「${clueName}」？`,
              cur: player?.clues?.[clueName],
            })
            $ref.one('hide.bs.modal', () => resolve()).modal('show')
          })
          $ref.modal('hide')
          this.$set(this.cluePicker, 'cb', null)
          if (_.isNil(newVal)) return
          this.$set(player.clues, clueName, newVal === 'clear' ? null : _.toInteger(newVal))
        },
        async confirm (text, confirmButtonText, cancelButtonText) {
          return await new Promise((resolve, reject) => {
            let isConfirmed = false
            const args = {
              cancelButtonColor: '#3085d6',
              cancelButtonText,
              confirmButtonColor: '#d33',
              confirmButtonText,
              didDestroy: () => { resolve(isConfirmed) },
              focusCancel: true,
              icon: 'warning',
              reverseButtons: true,
              showCancelButton: true,
              text,
            }
            Swal.fire(args).then(res => { isConfirmed = res.isConfirmed })
          })
        },
        sintToString (num) {
          return num >= 0 ? `+${num}` : num
        },
        showLoading (title, text) {
          Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },
        filterNil (arr) {
          return _.filter(arr, v => !_.isNil(v))
        },
        cardsToClues (cards) {
          const clues = {}
          for (const card of cards) {
            if (_.isNil(card)) continue
            for (const c of CARD_NAMES[card]) clues[c] = (clues[c] ?? 0) + 1
          }
          return clues
        },
        cluesSub (cluesA, cluesB) {
          const tmp = {}
          for (const [k, v] of _.toPairs(cluesA)) tmp[k] = v
          for (const [k, v] of _.toPairs(cluesB)) tmp[k] = (tmp[k] ?? 0) - v
          return _.fromPairs(_.filter(_.toPairs(tmp), p => p[1]))
        },
        nothing () {},
      },
    })
