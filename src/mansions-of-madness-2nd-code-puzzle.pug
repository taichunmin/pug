extends /layout/bootstrapV4

block beforehtml
  - const title = '瘋狂詭宅第二版 代碼謎題'

block style
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif

block content
  #app.container(v-cloak)
    h3.text-center.my-3= title
    .row
      .col-sm
        .card.mb-3
          h5.card-header #[i.fa.fa-fw.fa-gamepad] 代碼謎題
          .card-body
            .form-group
              label(for="i-num") 有幾個數字、幾個格子？
              .dropdown
                button.btn.btn-block.btn-primary.dropdown-toggle(type="button", data-toggle="dropdown") #[span.fa.fa-fw.fa-key] {{ i.num }} 種數字 {{ i.slot }} 個格子&nbsp;
                .dropdown-menu
                  template(v-for="n in [3,4,5,6]")
                    button.dropdown-item(type="button", v-for="s in [3,4,5,6]", :class="{active: (n === i.num && s === i.slot)}", @click="(n !== i.num || s !== i.slot) && btnSetNumSlot(n, s)") {{ n }} 種數字 {{ s }} 個格子
            .form-group
              label(for="i-guess") 請輸入 {{ i.slot }} 位數 1 到 {{ i.num }} 的數字 (可重複)
              .input-group.input-group-sm.mb-2(:class="getGuessClass(i.guess)")
                .input-group-prepend
                  span.input-group-text {{ i.guesses.length + 1 }}
                input.form-control#i-guess(type="text", inputmode="numeric", :maxlength="i.slot", v-model="i.guess", @keyup.enter="btnPushGuess", :class="getGuessClass(i.guess)")
                .input-group-append
                  button.btn.btn-success(type="button", @click="btnPushGuess") 送出
            table.table.table-sm.table-bordered.text-center.mb-0(v-if="i.guesses.length")
              thead: tr
                th #
                th 猜測數字
                th(colspan="2") 結果
              tbody.text-monospace
                tr(v-for="(guess, guessId) in i.guesses")
                  template(v-for="simi in [calcSimilarity(guess, i.answer)]")
                    th {{ guessId + 1 }}
                    td {{ guess }}
                    td {{ similarityToStr[simi] }}
                    td: a.badge.badge-info.mr-1(@click="btnPushSolver(guess, simi)", href="#") 求解
          .card-footer.text-right
            button.btn.btn-sm.btn-danger(type="button", @click="btnNewGame(false)") #[span.fa.fa-fw.fa-trash-o] 開新遊戲
      .col-sm
        .card.mb-3
          h5.card-header #[i.fa.fa-fw.fa-graduation-cap] 代碼謎題求解程式
          .card-body
            .form-group
              label 請輸入猜測數字與結果
              .input-group.input-group-sm.mb-2(v-for="(solver, solverId) in i.solvers", :class="getGuessClass(solver.guess)")
                .input-group-prepend
                  span.input-group-text {{ solverId + 1 }}
                input.form-control(type="text", inputmode="numeric", :maxlength="i.slot", v-model="solver.guess", :class="getGuessClass(solver.guess)")
                .input-group-append
                  button.btn.btn-outline-secondary.dropdown-toggle(type="button", data-toggle="dropdown") {{ similarityToStr[solver.simi] }}
                  .dropdown-menu.dropdown-menu-right
                    button.dropdown-item(type="button", v-for="simi in similarity", :class="{active: simi === solver.simi}", @click="solver.simi = simi") {{ similarityToStr[simi] }}
            .form-group.mb-0
              label 可能的謎底 #[span.badge.badge-pill.badge-success {{ possibilities.length }}]
              small.form-text.text-muted(v-if="!possibilities.length") 請輸入猜測數字與結果來顯示可能的謎底
              small.form-text.text-muted(v-if="possibilities.length > 100") 僅顯示前 100 筆可能的謎底
              #possibilities
                a.badge.badge-info.mr-1(v-for="possible in _.take(possibilities, 100)", @click="i.guess = possible", href="#") {{ possible }}
          .card-footer.text-right
            button.btn.btn-sm.btn-danger(type="button", @click="btnNewSolver(false)") #[span.fa.fa-fw.fa-trash-o] 重新求解

block script
  script.
    const SIMILARITY = {
      2: [0, 1, 2, 10, 20],
      3: [0, 1, 2, 3, 10, 11, 12, 20, 30],
      4: [0, 1, 2, 3, 4, 10, 11, 12, 13, 20, 21, 22, 30, 40],
      5: [0, 1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 20, 21, 22, 23, 30, 31, 32, 40, 50],
      6: [0, 1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 30, 31, 32, 33, 40, 41, 42, 50, 60],
    }
    window.vm = new Vue({
      el: '#app',
      data: {
        i: {
          answer: '',
          guess: '',
          guesses: [],
          num: 3,
          slot: 3,
          solvers: [],
        },
        similarityToStr: {
          0: '0A0B',
          1: '0A1B',
          2: '0A2B',
          3: '0A3B',
          4: '0A4B',
          5: '0A5B',
          6: '0A6B',
          10: '1A0B',
          11: '1A1B',
          12: '1A2B',
          13: '1A3B',
          14: '1A4B',
          15: '1A5B',
          20: '2A0B',
          21: '2A1B',
          22: '2A2B',
          23: '2A3B',
          24: '2A4B',
          30: '3A0B',
          31: '3A1B',
          32: '3A2B',
          33: '3A3B',
          40: '4A0B',
          41: '4A1B',
          42: '4A2B',
          50: '5A0B',
          60: '6A0B',
        },
      },
      mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'i', { ...this.i, ...saved })
        } catch (err) {}
        this.$watch('i', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.i))
        }, { deep: true })

        // 初始化
        if (!this.verifyGuess(this.i.answer)) this.btnNewGame(true)
        if (!this.i.solvers.length) this.btnNewSolver(true)
      },
      computed: {
        digits () {
          return '123456'.slice(0, this.i.num)
        },
        similarity () {
          return SIMILARITY[this.i.slot]
        },
        possibilities () {
          const solvers = _.filter(this.i.solvers, solver => this.verifyGuess(solver.guess) && _.hasIn(this.similarityToStr, solver.simi))
          if (!solvers.length) return []
          const possibilities = []
          const genPossibilities = (prefix = '', size = 0) => {
            if (size < this.i.slot) return _.each(this.digits, (c, i) => genPossibilities(prefix + c, size + 1))
            let isPossible = true
            for (const solver of solvers) {
              if (this.calcSimilarity(prefix, solver.guess) === solver.simi) continue
              isPossible = false
              break
            }
            if (isPossible) possibilities.push(prefix)
          }
          genPossibilities()
          return possibilities
        },
      },
      methods: {
        verifyGuess (guess) {
          if (!_.isString(guess) || guess.length !== this.i.slot) return false
          for (let i = 0; i < guess.length; i++) { if (!_.inRange(guess[i], 1, this.i.num + 1)) return false }
          return true
        },
        getGuessClass (guess) {
          if (!_.isString(guess) || !guess.length) return ''
          return this.verifyGuess(guess) ? 'is-valid' : 'is-invalid'
        },
        calcSimilarity (guess, answer) {
          let a = 0
          const digits = _.times(6, () => [0, 0])
          for (let i = 0; i < guess.length; i++) {
            if (guess[i] === answer[i]) a++
            digits[guess[i] - 1][0]++
            digits[answer[i] - 1][1]++
          }
          return _.sumBy(digits, digit => _.min(digit)) + 9 * a
        },
        btnPushGuess () {
          const guess = this.i.guess
          if (!this.verifyGuess(guess)) return
          if (_.includes(this.i.guesses, guess)) return
          this.i.guesses.push(guess)
          this.i.guess = ''
        },
        async btnSetNumSlot (num, slot, force = false) {
          if (!force && !await this.confirm(`將代碼謎題調整為「${num} 種數字 ${slot} 個格子」嗎？`)) return
          this.i.num = num
          this.i.slot = slot
          this.btnNewGame(true)
          this.btnNewSolver(true)
        },
        async btnNewGame (force = false) {
          if (!force && !await this.confirm('是否開始新的代碼謎題？')) return
          this.i.answer = _.times(this.i.slot, () => _.sample(this.digits)).join('')
          this.i.guess = ''
          this.i.guesses = []
        },
        async btnNewSolver (force = false) {
          if (!force && !await this.confirm('是否清空求解資料？')) return
          this.$set(this.i, 'solvers', _.times(9, i => ({
            guess: '',
            simi: 0,
          })))
        },
        async btnPushSolver (guess, simi) {
          const solver = _.find(this.i.solvers, solver => !this.verifyGuess(solver.guess))
          if (!solver) return
          solver.guess = guess
          solver.simi = simi
        },
        async confirm (text, confirmButtonText = '是', cancelButtonText = '否') {
          return await new Promise((resolve, reject) => {
            let isConfirmed = false
            const args = {
              cancelButtonColor: '#3085d6',
              cancelButtonText,
              confirmButtonColor: '#d33',
              confirmButtonText,
              didDestroy: () => { resolve(isConfirmed) },
              focusCancel: true,
              icon: 'warning',
              reverseButtons: true,
              showCancelButton: true,
              text,
            }
            Swal.fire(args).then(res => { isConfirmed = res.isConfirmed })
          })
        },
      },
    })
