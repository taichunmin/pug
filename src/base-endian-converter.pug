extends /layout/bootstrapV4

block beforehtml
  - title = 'Base Endian Converter'

block style
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .font-size-dot8
        font-size: 80%
      .input-group-prepend .input-group-text
        letter-spacing: -1px
        min-width: 8rem
      .badge
        letter-spacing: 0

block content
  #app.container.my-4.text-monospace(v-cloak)
    h3.my-3.text-center= title
    .row.mx-n1.mt-2
      .col-sm-12.col-lg-6.px-1
        .input-group.mt-2
          .input-group-prepend: span.input-group-text.justify-content-center Base
          select.form-control(v-model='h.base')
            option(value="bin") 2 進位 (bin)
            option(value="oct") 8 進位 (oct)
            option(value="dec") 10 進位 (dec)
            option(value="hex") 16 進位 (hex)
            option(value="base64") 64 進位 (base64)
            option(value="utf8") 純文字 (utf8)
      .col-sm-12.col-lg-6.px-1
        .input-group.mt-2
          .input-group-prepend: span.input-group-text.justify-content-center Endian
          select.form-control(v-model='h.endian')
            option(value="big") Big Endian (BE)
            option(value="little") Little Endian (LE)
    .input-group.input-group-sm.mt-2
      .input-group-prepend: span.input-group-text.justify-content-center.flex-column.justify-content-center.align-items-center
        | Value
        span.d-block.badge.badge-pill.badge-primary {{ val.length }}
      textarea.form-control(v-model="h.value", rows="5")
    .form-group.mt-3
      label Big Endian
      .input-group.input-group-sm.mt-2(v-for="baseEndian of ['binBE', 'octBE', 'decBE', 'hexBE', 'base64BE', 'base64urlBE', 'utf8BE']")
        .input-group-prepend: span.input-group-text.justify-content-center {{ baseEndian }}
        textarea.form-control(:value="me[baseEndian]" rows="3" readonly @click="btnCopy(me[baseEndian])")
    .form-group.mt-3
      label Little Endian
      .input-group.input-group-sm.mt-2(v-for="baseEndian of ['binLE', 'octLE', 'decLE', 'hexLE', 'base64LE', 'base64urlLE', 'utf8LE']")
        .input-group-prepend: span.input-group-text.justify-content-center {{ baseEndian }}
        textarea.form-control(:value="me[baseEndian]" rows="3" readonly @click="btnCopy(me[baseEndian])")

block script
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/crypto-js@4/crypto-js.min.js")
  script(type="module").
    import { Buffer } from 'https://cdn.jsdelivr.net/npm/@taichunmin/buffer@0/dist/buffer.mjs/+esm'
    const padByByteSize = (str, byteSize) => {
      if (byteSize < 2 || byteSize > 8) return str
      const tmp = str.length + byteSize - 1
      return `0000000${str}`.slice(tmp % byteSize - tmp)
    }
    const parseBaseFn = {
      bin (value) {
        if (!/^[01\s]+$/.test(value)) throw new Error('invalid value')
        value = value.replace(/\s/g, '')
        return Buffer.from(padByByteSize(BigInt(`0b${value}`).toString(16), 2), 'hex')
      },
      oct (value) {
        if (!/^[0-7\s]+$/.test(value)) throw new Error('invalid value')
        value = value.replace(/\s/g, '')
        return Buffer.from(padByByteSize(BigInt(`0o${value}`).toString(16), 2), 'hex')
      },
      dec (value) {
        if (!/^[0-9\s]+$/.test(value)) throw new Error('invalid value')
        value = value.replace(/\s/g, '')
        return Buffer.from(padByByteSize(BigInt(value).toString(16), 2), 'hex')
      },
      hex (value) {
        if (!/^[0-9a-fA-F\s]+$/.test(value)) throw new Error('invalid value')
        value = value.replace(/\s/g, '')
        return Buffer.from(padByByteSize(value, 2), 'hex')
      },
      base64 (value) {
        const { Base64, Hex } = window.CryptoJS.enc
        if (!/^[0-9a-zA-Z=+/_\s-]+$/.test(value)) throw new Error('invalid value')
        value = value.replace(/\s/g, '')
        return Buffer.from(value, 'base64')
      },
      utf8 (value) {
        return Buffer.from(value, 'utf8')
      },
    }
    const stringifyBaseFn = {
      bin (buf) {
        if (!Buffer.isBuffer(buf) || buf.length < 1 || buf.length > 64) return ''
        return _.map(buf, b => `0000000${b.toString(2)}`.slice(-8)).join(' ')
      },
      oct (buf) {
        if (!Buffer.isBuffer(buf) || buf.length < 1 || buf.length > 64) return ''
        return BigInt(`0x${buf.toString('hex')}`).toString(8)
      },
      dec (buf) {
        if (!Buffer.isBuffer(buf) || buf.length < 1) return ''
        return BigInt(`0x${buf.toString('hex')}`).toString()
      },
      hex (buf) {
        if (!Buffer.isBuffer(buf) || buf.length < 1) return ''
        return buf.toString('hex')
      },
      base64 (buf) {
        if (!Buffer.isBuffer(buf) || buf.length < 1) return ''
        return buf.toString('base64')
      },
      base64url (buf) {
        if (!Buffer.isBuffer(buf) || buf.length < 1) return ''
        return buf.toString('base64url')
      },
      utf8 (buf) {
        if (!Buffer.isBuffer(buf) || buf.length < 1) return ''
        return buf.toString('utf8')
      },
    }
    window.vm = new Vue({
      el: '#app',
      data: {
        h: {
          base: 'dec',
          endian: 'big',
          value: '',
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'h', { ...this.h, ...saved })
        } catch (err) {}
        this.$watch('h', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.h))
        }, { deep: true })
      },
      computed: {
        me () { return this },
        rval () { return new Buffer(this.val).reverse() },
        binBE () { return stringifyBaseFn.bin(this.val) },
        binLE () { return stringifyBaseFn.bin(this.rval) },
        octBE () { return stringifyBaseFn.oct(this.val) },
        octLE () { return stringifyBaseFn.oct(this.rval) },
        decBE () { return stringifyBaseFn.dec(this.val) },
        decLE () { return stringifyBaseFn.dec(this.rval) },
        hexBE () { return stringifyBaseFn.hex(this.val) },
        hexLE () { return stringifyBaseFn.hex(this.rval) },
        base64BE () { return stringifyBaseFn.base64(this.val) },
        base64LE () { return stringifyBaseFn.base64(this.rval) },
        base64urlBE () { return stringifyBaseFn.base64url(this.val) },
        base64urlLE () { return stringifyBaseFn.base64url(this.rval) },
        utf8BE () { return stringifyBaseFn.utf8(this.val) },
        utf8LE () { return stringifyBaseFn.utf8(this.rval) },
        val () {
          try {
            const { base, endian, value } = this.h
            if (value === '') throw new Error('empty')
            if (!parseBaseFn[base]) throw new Error('invalid base')
            let tmp = parseBaseFn[base](value)
            if (endian !== 'big') tmp = tmp.reverse()
            return tmp
          } catch (err) {
            //- console.log(err)
            return new Buffer()
          }
        },
      },
      methods: {
        async btnCopy (text, container = null) {
          if (!container) container = document.body
          const dom = document.createElement('textarea')
          dom.value = text
          container.appendChild(dom)
          dom.select()
          dom.setSelectionRange(0, 1e6) // For mobile devices
          document.execCommand('copy')
          container.removeChild(dom)
          await Swal.fire({ icon: 'success', title: '複製成功' })
        },
      },
    })
