extends /layout/default

block beforehtml
  - const title = '神機妙算記分板'

block style
  meta(property="fb:app_id", content="2133031763635285")
  meta(property="og:description", content="桌遊「神機妙算 Wizard」的電子計分紙")
  meta(property="og:image:height", content="640")
  meta(property="og:image:width", content="1280")
  meta(property="og:image", content="https://i.imgur.com/nYPObP2.jpg")
  meta(property="og:locale", content="zh_TW")
  meta(property="og:site_name", content="筆記國度")
  meta(property="og:title", content=title)
  meta(property="og:type", content="website")
  meta(property="og:url", content="https://taichunmin.idv.tw/pug/boardgame-wizard.html")
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      #app
        .dropdown-menu
          padding: 0

block content
  #app.container-fluid(v-cloak)
    h1.text-center.my-3= title
    .card.mb-3
      //- 頁面選單
      .card-header
        ul.nav.nav-tabs.card-header-tabs
          li.nav-item(v-for="pName, pId in {setting: '設定', input: '記錄', scores: '得分', rule: '規則'}")
            a.nav-link(href="#", :class="{active: i.page === pId}", @click="i.page = pId") {{ pName }}
      //- 設定頁面
      .card-body.px-3(v-if="i.page == 'setting'")
        .row.px-2
          .col.px-0.mx-2
            .dropdown
              button.btn.btn-block.btn-primary.dropdown-toggle(type="button", data-toggle="dropdown") #[span.fa.fa-fw.fa-male] {{ i.players.length }} 人&nbsp;
              .dropdown-menu
                button.dropdown-item(type="button", v-for="n in [3,4,5,6]", :class="{active: n === i.players.length}", @click="n !== i.players.length && setPlayers(n)") {{ n }} 人
          .col.px-0.mx-2
            button.btn.btn-danger.btn-block(type="button", @click="setPlayers(i.players.length)") #[span.fa.fa-fw.fa-trash-o] 清除資料
        .input-group.input-group-sm.mt-3(v-for="player, playerId in i.players", :key="playerId")
          .input-group-prepend
            .input-group-text 玩家 {{ playerId + 1 }} 暱稱
          input.form-control.form-control-sm(type="text", v-model="player.name")
          .input-group-append(v-if="playerId > 0")
            button.btn.btn-outline-secondary(type="button", tabindex="-1", @click="playerSwapWithNext(playerId-1)")
              i.fa.fa-fw.fa-arrow-up
      //- 紀錄頁面
      table.table.table-bordered.text-nowrap.text-center.mb-0(v-if="i.page == 'input' && !!roundMax")
        tr
          th.p-1(colspan="2") {{ i.roundCur + 1 }}/{{ roundMax }}
          th.p-1
            span.pr-2 預測
            span.badge.badge-info {{ predictsSum[i.roundCur] }}
          th.p-1
            span.pr-2 結果
            span.badge(:class="`badge-${roundsEnable[i.roundCur] ? 'success' : 'danger'}`") {{ resultsSum[i.roundCur] }}
        tr(v-for="player, playerId in i.players")
          td.p-2(:class="playerId === dealer ? 'bg-success text-white' : ''") {{ player.name }}
          td.p-2 {{ playersScore[playerId] }}
          template(v-for="round in [ player.rounds[i.roundCur] ]")
            td.p-1
              .dropdown
                button.btn.btn-sm.btn-block.btn-outline-info.dropdown-toggle(type="button", data-toggle="dropdown") 預測 {{ round.predict }} 墩
                .dropdown-menu.dropdown-menu-right
                  button.btn-sm.dropdown-item(type="button", v-for="n in _.range(i.roundCur + 2)", :class="{ active: n === round.predict }", @click="round.predict = n") 預測 {{ n }} 墩
            td.p-1
              .dropdown
                button.btn.btn-sm.btn-block.btn-outline-success.dropdown-toggle(type="button", data-toggle="dropdown") 贏得 {{ round.result }} 墩
                .dropdown-menu.dropdown-menu-right
                  button.btn-sm.dropdown-item(type="button", v-for="n in _.range(i.roundCur + 2)", :class="{ active: n === round.result }", @click="round.result = n") 贏得 {{ n }} 墩
      .card-body.py-2.px-3(v-if="i.page == 'input'")
        .row.px-2
          .col.px-0.mx-2
            button.btn.btn-block.btn-outline-secondary(type="button", v-if="i.roundCur > 0", @click="i.roundCur--") #[span.fa.fa-arrow-left] 上 1 輪
          .col.px-0.mx-2
            button.btn.btn-block(type="button", v-if="i.roundCur + 1 < roundMax", @click="i.roundCur++", :class="`btn-outline-${roundsEnable[i.roundCur] ? 'success' : 'danger'}`") #[span.fa.fa-arrow-right] 下 1 輪
      //- 得分頁面
      .table-responsive(v-if="i.page == 'scores' && !!roundMax")
        table.table.table-bordered.table-sm.mb-0.text-center.text-nowrap#result-table
          tr
            th.align-bottom #
            th(v-for="player, playerId in i.players")
              span.badge.badge-primary {{ playersScore[playerId] }}
              br
              span {{ player.name }}
          tr(v-for="roundId in roundMax", :key="roundId")
            th {{ roundId }}
            td(v-for="player in i.players")
              template(v-for="score in [calcPlayerRoundScore(player.rounds[roundId-1], roundId-1)]")
                span.round-score.text-success(v-if="score > 0") +{{ score }}
                span.round-score.text-danger(v-if="score < 0") {{ score }}
      //- 規則頁面
      .card-body.p-2.border-0(v-if="i.page == 'rule'")
        img.mb-3.d-block.mx-auto.img-fluid(src="https://i.imgur.com/70Y0eOD.jpg")
        h3 遊戲背景
        p 很久很久以前，在巨石陣裡還有知名魔法學院的時代，魔法學徒（玩家）們從事許多活動來訓練和琢磨他們的魔力。其中一個活動就是玩這個叫做「神機妙算」的紙牌遊戲，來發展和強化他們的預知天賦。
        p 在數千年後，這些訓練巫師的方法已經失傳。直到知名的德國考古學家 Horold Eitel 博士從巨石陣的石柱下挖掘出地窖，在裡面發現古老羊皮紙卷軸後，才讓「神機妙算」這個紙牌遊戲，重見天日。雖然紙牌中更深層更奧秘的意義可能已經失傳，但藉由重繪這些古老的圖像，及重述那古老卷軸上的規則，在此為您呈現這個充滿挑戰性的遊戲。
        h3 遊戲配件
        p 60 張角色牌，1 本真實之書（計分板），1 張羊皮紙（規則）。
        h3 遊戲目標
        p 在本遊戲中，每個玩家輪流出 1 張牌，正面朝上地置於桌面中央，這些牌就稱為 1 墩，由牌面最大的玩家贏得此墩。 玩家們必須正確地預測他們每輪遊戲將贏得的墩數，如果預測正確的話，就能得到經驗分數。 在遊戲結束時，得到最多經驗總分的人贏得遊戲，並且獲得「智者巫師」的稱號。
        h3 遊戲準備
        p 從玩家中選擇 1 位擔任理事，由他掌管「真實之書」，並在上面填寫玩家們的姓名，確實的紀錄每個人獲得的經驗分數。
        h3 發牌階段
        p {{ i.players.length }} 人遊戲共有 {{ roundMax }} 輪。 每輪順時針輪流由 1 位玩家作為發牌玩家（本計分板會以顏色提示誰為發牌玩家），第 1 輪每人 1 張牌、第 2 輪每人 2 張牌…依此類推。
        h3 王牌花色
        p 沒發完的牌正面朝下放置於桌面中央，翻開最上面的 1 張牌，這張牌的花色就是這輪的王牌花色。 若最上面的牌為巫師牌 Z，則由發牌玩家決定本輪的王牌花色，若最上面的牌為小丑牌 N 或是本輪是最後 1 輪時，則本輪沒有王牌花色。
        h3 開始預言
        p 在所有玩家看過自己的牌後，由發牌玩家開始，所有玩家依照順時針預測本輪會贏得幾墩，並且讓理事把所有玩家的預測紀錄於本記分板。
        h3 爭奪吃墩
        p 所有人都預測完後，就進入出牌階段，每次由本輪贏得上 1 墩的玩家先出牌，若是本輪第 1 次出牌則由發牌者先出牌。
        p 其他玩家必須順時針依序打出 1 張與先發者同花色的牌（本墩的花色），如果沒有同花色的牌，才能夠打出王牌花色（切牌）或其他花色的牌（墊牌）。
        p 注意：玩家隨時可以打出巫師牌 Z 或小丑牌 N，因為它們可以當作任何花色的牌。
        p 注意：若先出牌者打出巫師牌 Z，則其他人可以不受限制打出任何 1 張牌（包括巫師牌 Z 和小丑牌 N）。
        p 注意：若先出牌者打出小丑牌 N，則由下 1 個玩家出牌決定本墩的花色。 若下 1 家又打出小丑牌 N，則再由下 1 家出牌決定。
        p
          | 在所有玩家都出 1 張牌以後，牌最大的玩家贏得這 1 墩，並且把這 1 墩的牌收好放到自己面前，牌的大小為：
          ol
            li 若有人出巫師牌 Z，則第 1 個出 Z 的人贏得此墩。
            li 若沒人出巫師牌 Z，則打出王牌花色且點數最大的玩家贏得此墩（1 最小 13 最大）。
            li 若沒人出王牌花色，則打出本墩的花色且點數最大的玩家贏得此墩（1 最小 13 最大）。
            li 若所有人都出小丑牌 N，則第 1 個出 N 的人贏得此墩。
        h3 獲得分數
        p 當本輪的手牌全部打完後，本輪結束，並且將本輪每個人所贏得的墩數紀錄於本記分板。
        p
          | 遊戲計分的方式為：
          ul
            li 若該輪預測正確的玩家，贏得的每 1 墩都會得到 10 分，並且再額外獲得 20 分。
            li 若該輪預測錯誤的玩家，每多（少）贏得 1 墩，就扣除 10 分。
        p 玩家每輪所獲得的分數加總即為總分，總分最多的人獲勝。
        h3 變化玩法
        p #[strong 【加減 1 墩】]每次預測時，玩家們預測的墩數總和不能等於這輪的發牌張數。 例如：這輪遊戲發了 5 張牌，玩家們預測的墩數必須大於 5 墩或小於 5 墩。
        p #[strong 【隱藏預言】]每次預測時，玩家們必須偷偷把自己的預測告訴理事，並且讓理事記錄在計分板上，使用此規則時，玩家的預測就不會受到其他玩家影響。
        p #[strong 【秘密預言】]每次預測時，玩家要把自己的預測寫在自己的紙張上，在該輪遊戲結束後，才能公布自己的預測墩數。
        p #[strong 【深思熟慮】]第 1 輪時，玩家不能看自己的牌，所有玩家要把牌放在自己的額頭前面，讓其他玩家能夠看到紙牌內容，在所有玩家都看完別人的紙牌後（不能看自己的牌），才開始第 1 輪的預測，這規則不影響其他規則或其他輪遊戲。
        p #[strong 【單色玩法】]當玩家人數為 3 或 4 人時，每位玩家選擇 1 個花色的牌，並且各拿 1 張巫師牌 Z 和小丑牌 N，在 3 人遊戲時，將多餘的花色放回盒子中。 在這規則中，沒有王牌花色，玩家們把各自的牌堆洗勻後，覆蓋放在自己前面，第 1 輪抽 4 張牌。然後玩家們按照事先約定好的方式公開或秘密地預測自己將會贏得的墩數。 之後，每 1 輪多抽 1 張牌（第 2 輪 5 張牌、第 3 輪 6 張牌…依此類推）。 在這規則中，不會比較牌的花色，由數字最大的玩家贏得此墩，當數字最大的牌不止 1 張時，由先出牌的玩家贏得此墩。 每輪遊戲結束後，將紙牌根據花色歸還給該玩家，所有玩家需要把自己的牌堆洗勻，然後才能進行下 1 輪遊戲，總共進行 12 輪。
        h3 自製桌遊
        p 材料：兩副 1 樣的撲克牌及筆。
        p.mb-0 做法：為了講解方便，在此將撲克牌分別以 A 和 B 表示。從撲克牌 B 中挑出 2 的牌，於牌的左上、中間及右下寫上 N，然後從撲克牌 B 中挑出 4 的牌，於牌的左上、中間及右下寫上 Z，然後把撲克牌 A 的鬼牌移除。將撲克牌 A 的 52 張牌加上撲克牌 B 的 Z 和 N 就製作完成啦。

block script
  script.
    const vm = new Vue({ // eslint-disable-line
      el: '#app',
      data: {
        i: {
          page: 'setting',
          players: [],
          roundCur: 0,
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'i', { ...this.i, ...saved })
        } catch (err) {}
        this.$watch('i', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.i))
        }, { deep: true })
        if (!this.roundMax) await this.setPlayers(3, true)
      },
      computed: {
        roundMax () {
          if (!_.inRange(this.i.players.length, 3, 7)) return 0
          return 60 / this.i.players.length
        },
        predictsSum () {
          return _.times(this.roundMax, i => _.sumBy(this.i.players, player => _.get(player, `rounds.${i}.predict`, 0)))
        },
        resultsSum () {
          return _.times(this.roundMax, i => _.sumBy(this.i.players, player => _.get(player, `rounds.${i}.result`, 0)))
        },
        roundsEnable () {
          return _.times(this.roundMax, i => this.resultsSum[i] === i + 1)
        },
        playersScore () {
          return _.map(this.i.players, this.playerScore)
        },
        dealer () {
          return this.i.roundCur % this.i.players.length
        },
      },
      methods: {
        async setPlayers (n, slient = false) {
          if (!_.inRange(n, 3, 7)) return
          if (!slient) {
            const confirm = await Swal.fire({
              cancelButtonColor: '#3085d6',
              cancelButtonText: '保持原樣',
              confirmButtonColor: '#d33',
              confirmButtonText: '開啟新局',
              focusCancel: true,
              icon: 'warning',
              showCancelButton: true,
              text: `是否開始 1 個全新的 ${n} 人遊戲？`,
            })
            if (!confirm.value) return
          }
          this.$set(this.i, 'players', _.times(n, i => ({
            name: _.get(this, `i.players.${i}.name`, `${i + 1}P`),
            rounds: _.times(60 / n, () => ({ predict: 0, result: 0 })),
          })))
          this.i.roundCur = 0
        },
        calcPlayerRoundScore (round, roundId) {
          if (!this.roundsEnable[roundId]) return 0
          const predict = _.get(round, 'predict', 0)
          const result = _.get(round, 'result', 0)
          if (predict === result) return result * 10 + 20
          return Math.abs(result - predict) * -10
        },
        playerScore (player) {
          return _.sum(_.map(player.rounds, this.calcPlayerRoundScore))
        },
        playerSwapWithNext (playerId) {
          const players = this.i.players
          if (playerId < 0 || playerId > players.length - 2) return
          players.splice(playerId, 2, players[playerId + 1], players[playerId])
        },
      },
    })
