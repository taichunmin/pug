extends /layout/default

block beforehtml
  - const title = 'Octobeacon 設定'

block style
  meta(property="fb:app_id", content="2133031763635285")
  meta(property="og:description", content="設定 Octobeacon 的工具程式")
  meta(property="og:locale", content="zh_TW")
  meta(property="og:site_name", content="筆記國度")
  meta(property="og:title", content=title)
  meta(property="og:type", content="website")
  meta(property="og:url", content="https://taichunmin.idv.tw/pug/line-octobeacon.html")
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .card-beacon
        .input-group-sm
          .input-group-text
            min-width: 6.5rem;

block content
  #app.my-3.container-fluid(v-cloak)
    h3.mb-3.text-center= title
    .row.row-cols-1.row-cols-md-2.row-cols-xl-3
      .col.mb-4: .card
        .card-body.text-monospace
          h5.card-title 操作
          p.card-text 本程式目前支援在 Windows、macOS 及 Android 6.0 以上的 Chrome 中執行，請開啟定位以及藍牙。
          .row.row-cols-1.row-cols-md-2.mx-n1
            .col.px-1: button.mt-2.btn.btn-block.btn-outline-success(type="button", @click="btnRead") #[span.fa.fa-fw.fa-download] 讀取 Beacon
            .col.px-1: button.mt-2.btn.btn-block.btn-outline-primary(type="button", @click="btnWrite") #[span.fa.fa-fw.fa-upload] 寫入 Beacon
            .col.px-1: button.mt-2.btn.btn-block.btn-outline-info(type="button", @click="btnDevice") #[span.fa.fa-fw.fa-bluetooth] 選擇 Beacon
            .col.px-1: button.mt-2.btn.btn-block.btn-outline-danger(type="button", @click="btnReset") #[span.fa.fa-fw.fa-trash-o] 清除資料
      .col.mb-4(v-for="bc, bcNo in i.beacons"): .card.card-beacon
        .card-body.text-monospace
          .card-title.d-flex.justify-content-between
            h5 LINE Beacon {{ bcNo + 1 }}
            .custom-control.custom-switch
              input.custom-control-input(type="checkbox", :id="`bc${bcNo}-enabled`", v-model="bc.enabled")
              label.custom-control-label(:for="`bc${bcNo}-enabled`") 啟用
          .was-validated
            .input-group.input-group-sm.mt-2
              .input-group-prepend
                span.input-group-text.justify-content-end offset(16)
              input.form-control.text-right(type="text", maxlength="16", inputmode="email", pattern="[0-9a-fA-F]{16}", required, v-model="bc.offset")
            .input-group.input-group-sm.mt-2
              .input-group-prepend
                span.input-group-text.justify-content-end hwid(10)
              input.form-control.text-right(type="text", maxlength="10", inputmode="email", pattern="[0-9a-fA-F]{10}", required, v-model="bc.hwid")
            .input-group.input-group-sm.mt-2
              .input-group-prepend
                span.input-group-text.justify-content-end vendor(8)
              input.form-control.text-right(type="text", maxlength="8", inputmode="email", pattern="[0-9a-fA-F]{8}", required, v-model="bc.vendor")
            .input-group.input-group-sm.mt-2
              .input-group-prepend
                span.input-group-text.justify-content-end lot(16)
              input.form-control.text-right(type="text", maxlength="16", inputmode="email", pattern="[0-9a-fA-F]{16}", required, v-model="bc.lot")

block script
  script.
    const sleep = t => new Promise(resolve => { setTimeout(resolve, t) })
    window.vm = new Vue({
      el: '#app',
      data: {
        device: null,
        i: {
          beacons: null,
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'i', { ...this.i, ...saved })
        } catch (err) {}
        this.$watch('i', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.i))
        }, { deep: true })

        if (!this.i.beacons) await this.btnReset(false)
      },
      methods: {
        async getBluetoothAvailability () {
          return await _.invoke(navigator, 'bluetooth.getAvailability')
        },

        async btnReset (confirm = true) {
          if (confirm) {
            confirm = await Swal.fire({
              cancelButtonColor: '#3085d6',
              cancelButtonText: '保持原樣',
              confirmButtonColor: '#d33',
              confirmButtonText: '重設紀錄',
              focusCancel: true,
              icon: 'warning',
              showCancelButton: true,
              text: '是否重設本頁面的紀錄？',
            })
            if (!confirm.value) return
          }
          this.$set(this.i, 'beacons', _.times(8, () => ({
            enabled: true,
            offset: _.padStart('', 16, '0'),
            hwid: _.padStart('', 10, '0'),
            vendor: _.padStart('', 8, '0'),
            lot: _.padStart('', 16, '0'),
          })))
        },

        async bleGetDevice () {
          if (!await this.getBluetoothAvailability()) throw new Error('您的裝置不支援藍芽功能')
          const device = await navigator.bluetooth.requestDevice({
            filters: [{
              namePrefix: 'Octobeacon',
              services: ['89798198-0000-0000-0000-000000000000'],
            }],
          })
          if (!device) throw new Error('未選擇裝置')
          await sleep(100)
          return device
        },

        async btnDevice () {
          try {
            this.showLoading('請稍候', '選擇裝置中…')
            this.device = await this.bleGetDevice()
            await Swal.fire({ icon: 'success', title: '裝置選擇成功' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '裝置選擇失敗', text: err.message })
          }
        },

        async btnRead () {
          try {
            this.showLoading('請稍候', '從裝置讀取中…')
            if (!this.device) this.device = await this.bleGetDevice()
            await this.device.gatt.connect()
            const service = await this.device.gatt.getPrimaryService('89798198-0000-0000-0000-000000000000')
            const characteristic = await service.getCharacteristic('89798198-249d-48bd-894e-db156f1a70e6')
            this.settingParse(await characteristic.readValue())
            this.device.gatt.disconnect()
            await sleep(500) // 裝置重新廣播的時間是 0.5 秒
            await Swal.fire({ icon: 'success', title: '從裝置讀取成功' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '從裝置讀取失敗', text: err.message })
          }
        },

        async btnWrite () {
          try {
            this.showLoading('請稍候', '上傳到裝置中…')
            const blob = this.settingStringify()
            if (!this.device) this.device = await this.bleGetDevice()
            await this.device.gatt.connect()
            const service = await this.device.gatt.getPrimaryService('89798198-0000-0000-0000-000000000000')
            const characteristic = await service.getCharacteristic('89798198-249d-48bd-894e-db156f1a70e6')
            await characteristic.writeValue(blob.buffer)
            this.device.gatt.disconnect()
            await sleep(500) // 裝置重新廣播的時間是 0.5 秒
            await Swal.fire({ icon: 'success', title: '上傳到裝置成功' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '上傳到裝置失敗', text: err.message })
          }
        },

        showLoading (title, text) {
          Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },

        settingParse (blob) {
          console.log('settingParse: ', blob)
          if (_.get(blob, 'byteLength', 0) !== 210) throw new Error('尚未進入工程模式')
          const version = blob.getUint8(0)
          if (version !== 1) throw new Error(`version should be 1, received ${version}.`)
          const enabled = blob.getUint8(1).toString(2)
          const ts = blob.getBigUint64(2, true)
          const beacons = _.times(8, i => ({
            enabled: enabled[i] === '1',
            offset: _.padStart((blob.getBigUint64(25 * i + 10, true) + ts).toString(16), 16, '0'),
            hwid: this.blob2hex(blob, 25 * i + 18, 5),
            vendor: this.blob2hex(blob, 25 * i + 23, 4),
            lot: this.blob2hex(blob, 25 * i + 27, 8),
          }))
          this.$set(this.i, 'beacons', beacons)
        },

        settingStringify () {
          const buffer = new ArrayBuffer(210)
          const blob = new DataView(buffer)
          const beacons = this.i.beacons
          blob.setUint8(0, 1) // version
          blob.setUint8(1, _.parseInt(_.map(beacons, bc => '01'[+bc.enabled]).join(''), 2)) // enabled
          blob.setBigUint64(2, BigInt(0), true)
          for (let i = 0; i < 8; i++) {
            const beacon = beacons[i]
            if (!/^[0-9a-fA-F]{16}$/.test(beacon.offset)) throw new Error(`beacon[${i}].offset 資料格式有誤`)
            if (!/^[0-9a-fA-F]{10}$/.test(beacon.hwid)) throw new Error(`beacon[${i}].hwid 資料格式有誤`)
            if (!/^[0-9a-fA-F]{8}$/.test(beacon.vendor)) throw new Error(`beacon[${i}].vendor 資料格式有誤`)
            if (!/^[0-9a-fA-F]{16}$/.test(beacon.lot)) throw new Error(`beacon[${i}].lot 資料格式有誤`)
            blob.setBigUint64(25 * i + 10, BigInt(`0x${beacon.offset}`), true)
            this.hex2blob(`${beacon.hwid}${beacon.vendor}${beacon.lot}`, blob, 25 * i + 18, 17)
          }
          console.log('settingStringify: ', blob)
          return blob
        },

        blob2hex (blob, start, len) {
          return _.chain(len).times(i => _.padStart(blob.getUint8(start + i).toString(16), 2, '0')).join('').value()
        },

        hex2blob (hex, blob, start, len) {
          for (let i = 0; i < len; i++) blob.setUint8(start + i, _.parseInt(`${hex[2 * i]}${hex[2 * i + 1]}`, 16))
        },
      },
    })
