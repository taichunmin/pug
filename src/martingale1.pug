extends /layout/bootstrapV4

block beforehtml
  - title = '馬丁格爾計算機1'

block style
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .font-size-dot8
        font-size: .8rem
      .input-group-prepend .input-group-text
        letter-spacing: -2px
        min-width: 5.5rem
      .input-group-append .input-group-text
        letter-spacing: -2px
        min-width: 2.5rem

block content
  #app.container.my-4.text-monospace(v-cloak)
    h3.my-3.text-center.d-flex.justify-content-center.align-items-center
      .mr-2= title
      button.btn.btn-sm.btn-outline-danger(type="button", @click="btnReset") 重設
    .form-group
      label 參數設定
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 多空方向
        select.form-control.text-right(v-model.number="h.desire")
          option(value="long") 做多 (long)
          option(value="short") 做空 (short)
      .row.mx-n1
        .col-sm-12.col-lg-6.px-1
          .input-group.input-group-sm.mt-2
            .input-group-prepend: span.input-group-text.justify-content-center 幣價基準
            select.form-control.text-right(v-model.number="h.dp1")
              option(v-for="i of 9", :value="i-1") 10^{{ 1-i }}
        .col-sm-12.col-lg-6.px-1
          .input-group.input-group-sm.mt-2
            .input-group-prepend: span.input-group-text.justify-content-center 數量基準
            select.form-control.text-right(v-model.number="h.dp2")
              option(v-for="i of 9", :value="i-1") 10^{{ 1-i }}
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 加倉倍數
        input.form-control.text-right(type='number', v-model='h.volumeScale', min='1', @focus="$event.target.select()")
        .input-group-append: span.input-group-text.justify-content-center 倍
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 加倉次數
        input.form-control.text-right(type='number', v-model.number='h.safetyOrders', min='1', max="15", step="1", @focus="$event.target.select()")
        .input-group-append: span.input-group-text.justify-content-center 次
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 手續費
        input.form-control.text-right(type='number', v-model='h.feeRatio', min='0', @focus="$event.target.select()")
        .input-group-append: span.input-group-text.justify-content-center %
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 加倉百分比
        input.form-control.text-right(type='number', v-model='h.deviation', min='0', max="100", @focus="$event.target.select()")
        .input-group-append: span.input-group-text.justify-content-center %
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 止盈百分比
        input.form-control.text-right(type='number', v-model='h.takeProfit', min='0', max="100", @focus="$event.target.select()")
        .input-group-append: span.input-group-text.justify-content-center %
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 止損百分比
        input.form-control.text-right(type='number', v-model='h.stopLoss', min='0', max="100", @focus="$event.target.select()")
        .input-group-append: span.input-group-text.justify-content-center %
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 預計投資額
        input.form-control.text-right(type='number', v-model='h.investment', min='0', @focus="$event.target.select()")
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 成本調整
        input.form-control.text-right(type='number', v-model='h.costOffset', @focus="$event.target.select()")
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 目前幣價
        input.form-control.text-right(type='number', v-model='h.curPrice', min='0', @focus="$event.target.select()")
    .form-group
      label.d-flex.align-items-center
        .mr-2 買幣記錄
        a.btn.btn-sm.btn-outline-danger(href="javascript:void(0)", @click="btnNewBought") 清空
      table.mt-2.table.table-sm.table-bordered.font-size-dot8
        thead: tr.text-center
          th #
          th(style="width: 50%") 幣價
          th(style="width: 50%") 數量
        tbody: tr(v-for="bought of h.boughts")
          th.text-center.align-middle {{ h.boughts.indexOf(bought) + 1 }}
          td: input.form-control.form-control-sm.text-right(type='number', v-model='bought.price', min='0', @focus="$event.target.select()")
          td: input.form-control.form-control-sm.text-right(type='number', v-model='bought.coin', min='0', @focus="$event.target.select()")
    .form-group
      label 計算結果 (做{{ '空多'[+(h.desire === 'long')] }})
      table.mt-2.table.table-sm.table-bordered.font-size-dot8
        thead: tr.text-center
          th 幣價
          th 數量
          th 投資成本
        tbody: tr.text-right(v-for="txn of (h.desire === 'long' ? toBuysLong : toSellsShort)")
          td(@click="btnCopy(txn.price)") {{ txn.price }}
          td(@click="btnCopy(txn.coin)") {{ txn.coin }}
          td(@click="btnCopy(txn.cost)") {{ txn.cost }}
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 止盈價
        input.form-control.text-right(readonly, @click="btnCopy(takeProfit)", :value="takeProfit")
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 止損價
        input.form-control.text-right(readonly, @click="btnCopy(stopLoss)", :value="stopLoss")
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 持倉均價
        input.form-control.text-right(readonly, :value="avgPrice")
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 持倉量
        input.form-control.text-right(readonly, :value="holdingCoin")
      .input-group.input-group-sm.mt-2
        .input-group-prepend: span.input-group-text.justify-content-center 持倉成本
        input.form-control.text-right(readonly, :value="cost.toFixed(9, BigNumber.ROUND_HALF_CEIL)")

block script
  script(crossorigin="anonymous", src="https://cdn.jsdelivr.net/npm/bignumber.js@9/bignumber.min.js")
  script.
    /* global BigNumber */
    const bnPercentToScale = percent => BigNumber(percent).shiftedBy(-2).plus(1)
    window.vm = new Vue({
      el: '#app',
      data: {
        h: {
          boughts: [],
          costOffset: '0',
          curPrice: '2000',
          desire: 'long',
          deviation: '2',
          dp1: 2, // 幣價基準
          dp2: 3, // 數量基準
          feeRatio: '0.05',
          investment: '10000',
          safetyOrders: 8,
          stopLoss: '10',
          takeProfit: '2',
          volumeScale: '1.5',
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'h', { ...this.h, ...saved })
        } catch (err) {}
        this.$watch('h', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.h))
        }, { deep: true })

        const generateBoughts = () => {
          const { safetyOrders, boughts } = this.h
          if (safetyOrders + 1 === boughts.length) return
          this.$set(this.h, 'boughts', _.times(safetyOrders + 1, i => ({
            price: _.get(boughts, `${i}.price`, 0),
            coin: _.get(boughts, `${i}.coin`, 0),
          })))
        }
        generateBoughts()
        this.$watch('h.safetyOrders', generateBoughts)
      },
      computed: {
        validBoughts () {
          return _.filter(this.h.boughts, b => _.every(['price', 'coin'], k => BigNumber(b[k]).gt(0)))
        },
        holdingCoin () {
          return BigNumber.sum(0, ..._.map(this.validBoughts, 'coin'))
        },
        cost () {
          const boughts = this.validBoughts
          if (!boughts.length) return BigNumber(0)
          return BigNumber.sum(..._.map(boughts, b => BigNumber(b.coin).times(b.price)))
            .times(bnPercentToScale(this.h.feeRatio))
            .plus(this.h.costOffset) // 成本調整
        },
        toBuysLong () {
          let balance = BigNumber(this.h.investment).minus(this.cost)
          if (balance.lte(0)) return []

          const buys = []
          const boughts = this.validBoughts
          const volumeScale = BigNumber(this.h.volumeScale)
          const weights = _.times(this.h.safetyOrders + 1, i => BigNumber(volumeScale).pow(Math.max(0, i - 1))).slice(boughts.length)
          const deviation = bnPercentToScale(`-${this.h.deviation}`)
          const priceToFixed = price => BigNumber(price).toFixed(this.h.dp1, BigNumber.ROUND_FLOOR)
          let nextPrice = priceToFixed(boughts.length > 0 ? BigNumber.min(..._.map(boughts, 'price')).times(deviation) : BigNumber(this.h.curPrice))
          const feeRatio = bnPercentToScale(this.h.feeRatio)
          for (let i = 0; i < weights.length; i++) {
            const sumWeight = BigNumber.sum(0, ...weights.slice(i))
            const tmp = weights[i].div(sumWeight).times(balance)
            const buy = { price: nextPrice }
            buy.coin = tmp.div(feeRatio).div(buy.price).toFixed(this.h.dp2, BigNumber.ROUND_FLOOR)
            buy.cost = feeRatio.times(buy.coin).times(buy.price).toFixed(9, BigNumber.ROUND_HALF_CEIL)
            buys.push(buy)
            balance = balance.minus(buy.cost)
            nextPrice = priceToFixed(deviation.times(nextPrice))
          }
          return buys
        },
        toSellsShort () {
          let balance = BigNumber(this.h.investment).minus(this.cost)
          if (balance.lte(0)) return []

          const sells = []
          const boughts = this.validBoughts
          const volumeScale = BigNumber(this.h.volumeScale)
          const weights = _.times(this.h.safetyOrders + 1, i => BigNumber(volumeScale).pow(Math.max(0, i - 1))).slice(boughts.length)
          const deviation = bnPercentToScale(this.h.deviation)
          const priceToFixed = price => BigNumber(price).toFixed(this.h.dp1, BigNumber.ROUND_CEIL)
          let nextPrice = priceToFixed(boughts.length > 0 ? BigNumber.max(..._.map(boughts, 'price')).times(deviation) : BigNumber(this.h.curPrice))
          const feeRatio = bnPercentToScale(this.h.feeRatio)
          for (let i = 0; i < weights.length; i++) {
            const sumWeight = BigNumber.sum(0, ...weights.slice(i))
            const tmp = weights[i].div(sumWeight).times(balance)
            const sell = { price: nextPrice }
            sell.coin = tmp.div(feeRatio).div(sell.price).toFixed(this.h.dp2, BigNumber.ROUND_FLOOR)
            sell.cost = feeRatio.times(sell.coin).times(sell.price).toFixed(9, BigNumber.ROUND_HALF_CEIL)
            sells.push(sell)
            balance = balance.minus(sell.cost)
            nextPrice = priceToFixed(deviation.times(nextPrice))
          }
          return sells
        },
        avgPrice () {
          const boughts = this.validBoughts
          if (!boughts.length) return '尚未設定買幣記錄'
          return this.cost.div(bnPercentToScale(this.h.feeRatio)).div(this.holdingCoin)
            .toFixed(this.h.dp1, BigNumber.ROUND_HALF_CEIL)
        },
        takeProfit () {
          const boughts = this.validBoughts
          if (!boughts.length) return '尚未設定買幣記錄'
          const isLong = this.h.desire === 'long'
          const avgPrice = this.cost.div(bnPercentToScale(this.h.feeRatio)).div(this.holdingCoin)
          return bnPercentToScale(isLong ? this.h.takeProfit : `-${this.h.takeProfit}`)
            .times(avgPrice)
            .toFixed(this.h.dp1, BigNumber[isLong ? 'ROUND_CEIL' : 'ROUND_FLOOR'])
        },
        stopLoss () {
          const isLong = this.h.desire === 'long'
          const boughts = [...this.validBoughts, ...(isLong ? this.toBuysLong : this.toSellsShort)]
          const holdingCoin = BigNumber.sum(..._.map(boughts, 'coin'))
          const avgPrice = BigNumber.sum(..._.map(boughts, b => BigNumber(b.coin).times(b.price))).div(holdingCoin)
          return bnPercentToScale(isLong ? `-${this.h.stopLoss}` : this.h.stopLoss)
            .times(avgPrice)
            .toFixed(this.h.dp1, BigNumber[isLong ? 'ROUND_CEIL' : 'ROUND_FLOOR'])
        },
      },
      methods: {
        async btnCopy (text, container = null) {
          if (!container) container = document.body
          const dom = document.createElement('textarea')
          dom.value = text
          container.appendChild(dom)
          dom.select()
          dom.setSelectionRange(0, 1e6) // For mobile devices
          document.execCommand('copy')
          container.removeChild(dom)
          await Swal.fire({ icon: 'success', title: '複製成功' })
        },
        async btnReset () {
          if (!await this.confirm('是否重設資料？（此動作無法還原）', '確定', '取消')) return
          this.showLoading('重設資料中...', '重設後將自動重新整理網頁。')
          localStorage.removeItem(location.pathname)
          location.reload()
          return await new Promise(resolve => {})
        },
        async confirm (text, confirmButtonText, cancelButtonText) {
          return await new Promise((resolve, reject) => {
            let isConfirmed = false
            const args = {
              cancelButtonColor: '#3085d6',
              cancelButtonText,
              confirmButtonColor: '#d33',
              confirmButtonText,
              didDestroy: () => { resolve(isConfirmed) },
              focusCancel: true,
              icon: 'warning',
              reverseButtons: true,
              showCancelButton: true,
              text,
            }
            Swal.fire(args).then(res => { isConfirmed = res.isConfirmed })
          })
        },
        async btnNewBought () {
          if (!await this.confirm('是否清空買幣記錄？（此動作無法還原）', '確定', '取消')) return
          this.$set(this.h, 'boughts', _.times(this.h.safetyOrders + 1, () => ({
            price: '0',
            coin: '0',
          })))
        },
        showLoading (title, text) {
          Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },
      },
    })
