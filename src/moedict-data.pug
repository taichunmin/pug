extends /layout/bootstrapV4

block beforehtml
  - const title = '萌典轉 jieba 詞庫'

block style
  meta(property="fb:app_id", content="2133031763635285")
  meta(property="og:description", content="YouBike 站點 KML 產生器")
  meta(property="og:locale", content="zh_TW")
  meta(property="og:site_name", content="筆記國度")
  meta(property="og:title", content=title)
  meta(property="og:type", content="website")
  meta(property="og:url", content="https://taichunmin.idv.tw/pug/youbike-kml.html")
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif

block content
  #app.my-3.text-monospace.container(v-cloak)
    .card
      .card-body
        h5.card-title= title
        p.card-text 請點選以下按鈕下載轉換完成的檔案。
      .list-group.list-group-flush
        a.list-group-item.list-group-item-action.list-group-item-info(v-for="file of files", :key="file.url", target="_blank", :href="file.url", :download="file.filename") 請點此下載 {{ file.filename }} #[span.badge.badge-light {{ file.size }}]

block script
  script.
    window.vm = new Vue({
      el: '#app',
      data: {
        files: [],
      },
      async mounted () {
        await this.init()
      },
      methods: {
        async init () {
          try {
            this.showLoading('請稍候…', '正在產生檔案')
            const words = _.orderBy(_.uniq(_.flatten(await Promise.all([
              this.fetchMoedict(),
              this.fetchMoedictCsld(),
              this.fetchNaerTermsCovid(),
            ]))), [
              word => word.length,
              word => word,
            ], ['desc', 'asc'])

            // 產生 jieba 的檔案
            this.files.push({
              filename: 'moedict-jieba.txt',
              size: words.length,
              url: this.strToObjectURL(words.join('\n'), { type: 'text/plain; charset=utf-8' }),
            })
            await Swal.fire({ icon: 'success', title: '檔案產生成功' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '檔案產生失敗', text: err.message })
          }
        },
        async fetchMoedict () {
          const moedict = _.get(await axios.get('https://raw.githubusercontent.com/g0v/moedict-data/master/dict-cat.json'), 'data')
          return _.flatten(_.map(moedict, 'entries'))
        },
        async fetchMoedictCsld () {
          return _.get(await axios.get('https://raw.githubusercontent.com/g0v/moedict-data-csld/master/%3D%E8%87%BA%E7%81%A3%E7%89%B9%E6%9C%89.json'), 'data')
        },
        async fetchNaerTermsCovid () {
          const result = _.get(await axios.get('https://gist.githubusercontent.com/taichunmin/70b73068184465ef628fa6bd2627e607/raw/terms-naer-edu-tw-covid19.csv'), 'data')
          return result.split(/\r?\n/)
        },
        strToObjectURL (str, options) {
          return URL.createObjectURL(new Blob([str], options))
        },
        showLoading (title, text) {
          Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },
      },
    })
